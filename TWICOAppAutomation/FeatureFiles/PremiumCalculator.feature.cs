// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
// Generation customised by SpecFlow.Contrib.Variants
namespace SurakshaAutomation.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PremiumCalculator")]
    public partial class PremiumCalculatorFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PremiumCalculator.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "FeatureFiles", "PremiumCalculator", "A short summary of the feature", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000150-Business Loan", "Business Loan", "01/10/1962 00:00:00", "11/03/2023 00:00:00", "", "7", "2000000", "No", "No", "123", "Single Life", "Mr", "BorrowerFirstSix", "SurnameFirstSix", "KODQAQ00511", "KAA00511", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "8688398973", "Nikhila.Duvva@valuemomentum.com", "F", "", "Mrs", "christina", "joseph", "01/01/2005 00:00:00", "F", "Daughter", "100", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyUserAbleToSubmitTheApplicationWhenNomineeIs18YearsOfAge with ""Muthoot Finance"", ""CD000150-Business Loan"", ""Business Loan"", ""01/10/1962 00:00:00"", ""11/03/2023 00:00:00"", """", ""7"", ""2000000"", ""No"", ""No"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstSix"", ""SurnameFirstSix"", ""KODQAQ00511"", ""KAA00511"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""8688398973"", ""Nikhila_Duvva@valuemomentum_com"", ""F"", """", ""Mrs"", ""christina"", ""joseph"", ""01/01/2005 00:00:00"", ""F"", ""Daughter"", ""100"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyUserAbleToSubmitTheApplicationWhenNomineeIs18YearsOfAge(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ID_3_Nikhila_(PremiumCalculator)",
                    "Nikhila",
                    "DataSource:ID3_NomieeAge18.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User able to submit the application when nominee is = 18 years of age", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should select {0} and  {1} and Click on preceed button", iSDOGHSMQSUBMITTED, referenceUTRNO_), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7} and Click on Proceed but" +
                        "ton", borrowersFirstName, borrowersSurName, borrowersGender, borrowersMobileNo_, borrowersEmailId, loanID, temporaryLoanID, customerID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and click on proceed button in Borrower" +
                        " address page", borrowersAddressAddressLine1, borrowersAddressAddressLine2, borrowersAddressAddressLine3, borrowersAddressStateUT, borrowersAddressPinCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.Then(string.Format("User should enter Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, <NOMINEE #1: Nominee" +
                        "\'s  Mobile Number>, {7} in Nominee page and click on Save and submit button", nOMINEE1NomineesSalutationDrMissMrMrsMs, nOMINEE1NomineesFirstName, nOMINEE1NomineesSurName, nOMINEE1NomineesDOBDDMMYYYY, nOMINEE1NomineesGender, nOMINEE1NomineesRelationshipWithBorrower, nOMINEE1ShareIfMultipleNominees, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.When(string.Format("Nominee is less than eighteen years user should enter Appointee details {0}, {1}," +
                        " {2}, {3}, {4}, {5}, {6}, {7}, {8} in Appointee page and click on Save and submi" +
                        "t button", appointeesSalutationDrMissMrMrsMs, appointeesFirstName, appointeesSurName, appointeesGender, appointeesMaritalStatus, appointeesDOBDDMMYYYY, appointeesIDNO_, appointeesRelationshipWithTheBorrower, nOMINEE1NomineesDOBDDMMYYYY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.When(string.Format("role associated with the loan is joint then user should enter details {0}, {1}, {" +
                        "2}, {3}, <Secondary Member details (Joint Life/Co borrower):  Email ID>, {4}, {5" +
                        "}, {6} in secondary members details", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, secondaryMemberDetailsJointLifeCoBorrowerFirstName, secondaryMemberDetailsJointLifeCoBorrowerSurName, secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, secondaryMemberDetailsJointLifeCoBorrowerCustomerID, secondaryMemberDetailsJointLifeCoBorrowerLoanId, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("Verify the successful messages and click go to Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000247-Personal Loan", "Loan Against Property", "06/09/1980 00:00:00", "03/03/2023 00:00:00", "42", "2", "1900000", "No", "No", "12345", "Joint Life/Co-borrower", "Mr", "BorrowerFirstOne", "SurnameFirstOne", "KODA00512", "KODA00512", "", "", "North", "ANUPGARH", "70.0", "8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Kri" +
            "shna Nagar", "Ammalladinne", "Anantapur dist.", "Andhra Pradesh", "India", "515001", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "sowjanya", "krishnamurthy", "10/10/2005 00:00:00", "F", "Other", "100", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Mr", "Krishna Murthy", "Gudipala", "M", "Married", "06/08/1990 00:00:00", "", "Other", "Miss", "carolina", "marin", "F", "22/08/1999 00:00:00", "", "1500000", "KODA00511", "KODA00511", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyFIGUserAbleToSubmitTheApplicationUsingPolicy_CD000247AndTenure2Month with ""Muthoot Finance"", ""CD000247-Personal Loan"", ""Loan Against Property"", ""06/09/1980 00:00:00"", ""03/03/2023 00:00:00"", ""42"", ""2"", ""1900000"", ""No"", ""No"", ""12345"", ""Joint Life/Co-borrower"", ""Mr"", ""BorrowerFirstOne"", ""SurnameFirstOne"", ""KODA00512"", ""KODA00512"", """", """", ""North"", ""ANUPGARH"", ""70_0"", ""8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Krishna Nagar"", ""Ammalladinne"", ""Anantapur dist_"", ""Andhra Pradesh"", ""India"", ""515001"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""sowjanya"", ""krishnamurthy"", ""10/10/2005 00:00:00"", ""F"", ""Other"", ""100"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Mr"", ""Krishna Murthy"", ""Gudipala"", ""M"", ""Married"", ""06/08/1990 00:00:00"", """", ""Other"", ""Miss"", ""carolina"", ""marin"", ""F"", ""22/08/1999 00:00:00"", """", ""1500000"", ""KODA00511"", ""KODA00511"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyFIGUserAbleToSubmitTheApplicationUsingPolicy_CD000247AndTenure2Month(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ID_7_Nikhila_(PremiumCalculator)",
                    "Nikhila",
                    "DataSource:ID7.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify FIG user able to submit the application using Policy - CD000247 and tenure" +
                    " 2 month", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should select {0} and  {1} and Click on preceed button", iSDOGHSMQSUBMITTED, referenceUTRNO_), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7} and Click on Proceed but" +
                        "ton", borrowersFirstName, borrowersSurName, borrowersGender, borrowersMobileNo_, borrowersEmailId, loanID, temporaryLoanID, customerID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and click on proceed button in Borrower" +
                        " address page", borrowersAddressAddressLine1, borrowersAddressAddressLine2, borrowersAddressAddressLine3, borrowersAddressStateUT, borrowersAddressPinCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.Then(string.Format("User should enter Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, <NOMINEE #1: Nominee" +
                        "\'s  Mobile Number>, {7} in Nominee page and click on Save and submit button", nOMINEE1NomineesSalutationDrMissMrMrsMs, nOMINEE1NomineesFirstName, nOMINEE1NomineesSurName, nOMINEE1NomineesDOBDDMMYYYY, nOMINEE1NomineesGender, nOMINEE1NomineesRelationshipWithBorrower, nOMINEE1ShareIfMultipleNominees, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.When(string.Format("Nominee is less than eighteen years user should enter Appointee details {0}, {1}," +
                        " {2}, {3}, {4}, {5}, {6}, {7}, {8} in Appointee page and click on Save and submi" +
                        "t button", appointeesSalutationDrMissMrMrsMs, appointeesFirstName, appointeesSurName, appointeesGender, appointeesMaritalStatus, appointeesDOBDDMMYYYY, appointeesIDNO_, appointeesRelationshipWithTheBorrower, nOMINEE1NomineesDOBDDMMYYYY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.When(string.Format("role associated with the loan is joint then user should enter details {0}, {1}, {" +
                        "2}, {3}, <Secondary Member details (Joint Life/Co borrower):  Email ID>, {4}, {5" +
                        "}, {6} in secondary members details", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, secondaryMemberDetailsJointLifeCoBorrowerFirstName, secondaryMemberDetailsJointLifeCoBorrowerSurName, secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, secondaryMemberDetailsJointLifeCoBorrowerCustomerID, secondaryMemberDetailsJointLifeCoBorrowerLoanId, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("Verify the successful messages and click go to Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000150-Business Loan", "Business Loan", "01/10/1962 00:00:00", "11/03/2023 00:00:00", "", "7", "2000000", "No", "No", "123", "Single Life", "Mr", "BorrowerFirstSix", "SurnameFirstSix", "KODQAQ00511", "KAA00511", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "8688398973", "Nikhila.Duvva@valuemomentum.com", "F", "", "Mrs", "christina", "joseph", "01/01/2005 00:00:00", "F", "Daughter", "100", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyUserAbleToCalculatePremiumAfterUpdatingAllTheRequiredFieldsAlongWithPolicyType_SingleLifeAndMode_SinglePremiumInPremiumCalculatorScreen with ""Muthoot Finance"", ""CD000150-Business Loan"", ""Business Loan"", ""01/10/1962 00:00:00"", ""11/03/2023 00:00:00"", """", ""7"", ""2000000"", ""No"", ""No"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstSix"", ""SurnameFirstSix"", ""KODQAQ00511"", ""KAA00511"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""8688398973"", ""Nikhila_Duvva@valuemomentum_com"", ""F"", """", ""Mrs"", ""christina"", ""joseph"", ""01/01/2005 00:00:00"", ""F"", ""Daughter"", ""100"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyUserAbleToCalculatePremiumAfterUpdatingAllTheRequiredFieldsAlongWithPolicyType_SingleLifeAndMode_SinglePremiumInPremiumCalculatorScreen(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ID_11_Nikhila(PremiumCalculator)",
                    "Nikhila",
                    "DataSource:ID11.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User able to calculate premium after updating all the required fields alon" +
                    "g with policy type - single life and mode - single premium in Premium calculator" +
                    " screen", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify User able to calculate premium without updating mandatory values in the pr" +
            "emium calculator page")]
        [NUnit.Framework.CategoryAttribute("ID_15_Nikhila(PremiumCalculator)")]
        [NUnit.Framework.CategoryAttribute("Nikhila")]
        public virtual void VerifyUserAbleToCalculatePremiumWithoutUpdatingMandatoryValuesInThePremiumCalculatorPage()
        {
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User able to calculate premium without updating mandatory values in the pr" +
                    "emium calculator page", null, new string[] {
                        "ID_15_Nikhila(PremiumCalculator)",
                        "Nikhila"}, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And("click on calculate premium button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.Then("Validate the error messages in the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000150-Business Loan", "Business Loan", "01/10/1962 00:00:00", "11/03/2023 00:00:00", "", "7", "2000000", "No", "No", "123", "Joint Life/Co-borrower", "Mr", "Modi", "Mowa", "KODA00599", "KODA00599", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "8978853433", "durgaprasad.baggu@valuemomentum.com", "M", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "Yuva", "uva", "08/09/1992 00:00:00", "F", "Mother", "25", "9502996647", "Mr", "Naga", "nag", "08/09/1990 00:00:00", "M", "Father", "25", "", "Mr", "Teja", "tej", "12/04/2000 00:00:00", "M", "Brother", "25", "9502996647", "", "", "", "", "", "", "", "", "Miss", "carolina", "marin", "F", "22804", "", "1500000", "KODA00599", "KODA00599", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyFIGUserAbleToSubmitTheApplicationForPolicyType_SingleLife with ""Muthoot Finance"", ""CD000150-Business Loan"", ""Business Loan"", ""01/10/1962 00:00:00"", ""11/03/2023 00:00:00"", """", ""7"", ""2000000"", ""No"", ""No"", ""123"", ""Joint Life/Co-borrower"", ""Mr"", ""Modi"", ""Mowa"", ""KODA00599"", ""KODA00599"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""8978853433"", ""durgaprasad_baggu@valuemomentum_com"", ""M"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""Yuva"", ""uva"", ""08/09/1992 00:00:00"", ""F"", ""Mother"", ""25"", ""9502996647"", ""Mr"", ""Naga"", ""nag"", ""08/09/1990 00:00:00"", ""M"", ""Father"", ""25"", """", ""Mr"", ""Teja"", ""tej"", ""12/04/2000 00:00:00"", ""M"", ""Brother"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", ""Miss"", ""carolina"", ""marin"", ""F"", ""22804"", """", ""1500000"", ""KODA00599"", ""KODA00599"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyFIGUserAbleToSubmitTheApplicationForPolicyType_SingleLife(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teja2",
                    "DataSource:PremiumCalculatorDataTeja1.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify FIG User able to submit the application for Policy Type - Single Life", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Enter Suraksha Portal URL in the browser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.When("Enter Emaild ID and Password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("Click on Sign In button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should select {0} and  {1} and Click on preceed button", iSDOGHSMQSUBMITTED, referenceUTRNO_), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7} and Click on Proceed but" +
                        "ton", borrowersFirstName, borrowersSurName, borrowersGender, borrowersMobileNo_, borrowersEmailId, loanID, temporaryLoanID, customerID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and click on proceed button in Borrower" +
                        " address page", borrowersAddressAddressLine1, borrowersAddressAddressLine2, borrowersAddressAddressLine3, borrowersAddressStateUT, borrowersAddressPinCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.Then(string.Format("User should enter Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, <NOMINEE #1: Nominee" +
                        "\'s  Mobile Number>, {7} in Nominee page and click on Save and submit button", nOMINEE1NomineesSalutationDrMissMrMrsMs, nOMINEE1NomineesFirstName, nOMINEE1NomineesSurName, nOMINEE1NomineesDOBDDMMYYYY, nOMINEE1NomineesGender, nOMINEE1NomineesRelationshipWithBorrower, nOMINEE1ShareIfMultipleNominees, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.When(string.Format("Nominee is less than eighteen years user should enter Appointee details {0}, {1}," +
                        " {2}, {3}, {4}, {5}, {6}, {7}, {8} in Appointee page and click on Save and submi" +
                        "t button", appointeesSalutationDrMissMrMrsMs, appointeesFirstName, appointeesSurName, appointeesGender, appointeesMaritalStatus, appointeesDOBDDMMYYYY, appointeesIDNO_, appointeesRelationshipWithTheBorrower, nOMINEE1NomineesDOBDDMMYYYY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.When(string.Format("role associated with the loan is joint then user should enter details {0}, {1}, {" +
                        "2}, {3}, <Secondary Member details (Joint Life/Co borrower):  Email ID>, {4}, {5" +
                        "}, {6} in secondary members details", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, secondaryMemberDetailsJointLifeCoBorrowerFirstName, secondaryMemberDetailsJointLifeCoBorrowerSurName, secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, secondaryMemberDetailsJointLifeCoBorrowerCustomerID, secondaryMemberDetailsJointLifeCoBorrowerLoanId, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("Verify the successful messages and click go to Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000244-Home Loan", "Loan Against Property", "06/09/1980 00:00:00", "03/03/2023 00:00:00", "42", "10", "1900000", "No", "No", "123", "Single Life", "Mr", "BorrowerFirstOne", "SurnameFirstOne", "KODA00590", "KODA00590", "", "", "North", "ANUPGARH", "70.0", "8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Kri" +
            "shna Nagar", "Ammalladinne", "Anantapur dist.", "Andhra Pradesh", "India", "515001", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "sowjanya", "krishnamurthy", "10/10/2010 00:00:00", "F", "Other", "100", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Mr", "Krishna Murthy", "Gudipala", "M", "Married", "06/08/1990 00:00:00", "", "Other", "", "", "", "", "", "0", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyFIGUserAbleToSubmitTheApplicationForSingleJointLifeByAddingAppointeeDetailsWhenNomineeIsBelow18YearsOfAge with ""Muthoot Finance"", ""CD000244-Home Loan"", ""Loan Against Property"", ""06/09/1980 00:00:00"", ""03/03/2023 00:00:00"", ""42"", ""10"", ""1900000"", ""No"", ""No"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstOne"", ""SurnameFirstOne"", ""KODA00590"", ""KODA00590"", """", """", ""North"", ""ANUPGARH"", ""70_0"", ""8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Krishna Nagar"", ""Ammalladinne"", ""Anantapur dist_"", ""Andhra Pradesh"", ""India"", ""515001"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""sowjanya"", ""krishnamurthy"", ""10/10/2010 00:00:00"", ""F"", ""Other"", ""100"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Mr"", ""Krishna Murthy"", ""Gudipala"", ""M"", ""Married"", ""06/08/1990 00:00:00"", """", ""Other"", """", """", """", """", """", ""0"", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyFIGUserAbleToSubmitTheApplicationForSingleJointLifeByAddingAppointeeDetailsWhenNomineeIsBelow18YearsOfAge(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "durgaTestCase2",
                    "DataSource:PremiumCalculatorDataNomineeBelow18.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify FIG User able to submit the application for single/joint life by adding ap" +
                    "pointee details when nominee is below 18 years of age", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should select {0} and  {1} and Click on preceed button", iSDOGHSMQSUBMITTED, referenceUTRNO_), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7} and Click on Proceed but" +
                        "ton", borrowersFirstName, borrowersSurName, borrowersGender, borrowersMobileNo_, borrowersEmailId, loanID, temporaryLoanID, customerID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and click on proceed button in Borrower" +
                        " address page", borrowersAddressAddressLine1, borrowersAddressAddressLine2, borrowersAddressAddressLine3, borrowersAddressStateUT, borrowersAddressPinCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.Then(string.Format("User should enter Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} in Nominee " +
                        "page and click on Save and submit button", nOMINEE1NomineesSalutationDrMissMrMrsMs, nOMINEE1NomineesFirstName, nOMINEE1NomineesSurName, nOMINEE1NomineesDOBDDMMYYYY, nOMINEE1NomineesGender, nOMINEE1NomineesRelationshipWithBorrower, nOMINEE1ShareIfMultipleNominees, nOMINEE1NomineesMobileNumber, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.When(string.Format("Nominee is less than eighteen years user should enter Appointee details {0}, {1}," +
                        " {2}, {3}, {4}, {5}, {6}, {7}, {8} in Appointee page and click on Save and submi" +
                        "t button", appointeesSalutationDrMissMrMrsMs, appointeesFirstName, appointeesSurName, appointeesGender, appointeesMaritalStatus, appointeesDOBDDMMYYYY, appointeesIDNO_, appointeesRelationshipWithTheBorrower, nOMINEE1NomineesDOBDDMMYYYY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.When(string.Format("role associated with the loan is joint then user should enter details {0}, {1}, {" +
                        "2}, {3}, <Secondary Member details (Joint Life/Co borrower):  Email ID>, {4}, {5" +
                        "}, {6} in secondary members details", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, secondaryMemberDetailsJointLifeCoBorrowerFirstName, secondaryMemberDetailsJointLifeCoBorrowerSurName, secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, secondaryMemberDetailsJointLifeCoBorrowerCustomerID, secondaryMemberDetailsJointLifeCoBorrowerLoanId, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("Verify the successful messages and click go to Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify FIG User able to navigate to premium calculator using left navigation menu" +
            "")]
        [NUnit.Framework.CategoryAttribute("durgaTestCase14")]
        public virtual void VerifyFIGUserAbleToNavigateToPremiumCalculatorUsingLeftNavigationMenu()
        {
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify FIG User able to navigate to premium calculator using left navigation menu" +
                    "", null, new string[] {
                        "durgaTestCase14"}, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000150-Business Loan", "Business Loan", "01/10/1962 00:00:00", "11/03/2023 00:00:00", "", "7", "2000000", "No", "No", "123", "Joint Life/Co-borrower", "Mr", "BorrowerFirstSix", "SurnameFirstSix", "KODA00511", "KODA00511", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "8978853433", "durgaprasad.baggu@valuemomentum.com", "M", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "100", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Miss", "carolina", "marin", "F", "22804", "", "1500000", "KODA00511", "KODA00511", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyFIGUserAbleToViewDateOfBirthSecondaryInsuredIsDisplayedAfterSelectingPolicyType_JointPolicyCo_Borrower with ""Muthoot Finance"", ""CD000150-Business Loan"", ""Business Loan"", ""01/10/1962 00:00:00"", ""11/03/2023 00:00:00"", """", ""7"", ""2000000"", ""No"", ""No"", ""123"", ""Joint Life/Co-borrower"", ""Mr"", ""BorrowerFirstSix"", ""SurnameFirstSix"", ""KODA00511"", ""KODA00511"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""8978853433"", ""durgaprasad_baggu@valuemomentum_com"", ""M"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""100"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Miss"", ""carolina"", ""marin"", ""F"", ""22804"", """", ""1500000"", ""KODA00511"", ""KODA00511"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyFIGUserAbleToViewDateOfBirthSecondaryInsuredIsDisplayedAfterSelectingPolicyType_JointPolicyCo_Borrower(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Pavan",
                    "DataSource:PremiumCalculatorDataJointPolicy.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify FIG User able to view Date of Birth Secondary Insured is displayed after s" +
                    "electing Policy Type - Joint Policy/Co-borrower", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Demo Client", "CD000150-Business Loan", "Business Loan", "01/10/1962 00:00:00", "11/03/2023 00:00:00", "", "7", "200000", "No", "Yes", "123", "Joint Life/Co-borrower", "Mr", "BorrowerFirstSix", "SurnameFirstSix", "KODA01512", "KODA01512", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "jteks", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "random", "random", "08/09/1993 00:00:00", "F", "Sibling", "25", "9502996647", "Mrs", "sdew", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "", "", "", "", "", "", "", "", "Miss", "carolina", "marin", "F", "01/10/1965 00:00:00", "", "1500000", "KODA01512", "KODA01512", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"PremiumCalculatorData4Nominees with ""Demo Client"", ""CD000150-Business Loan"", ""Business Loan"", ""01/10/1962 00:00:00"", ""11/03/2023 00:00:00"", """", ""7"", ""200000"", ""No"", ""Yes"", ""123"", ""Joint Life/Co-borrower"", ""Mr"", ""BorrowerFirstSix"", ""SurnameFirstSix"", ""KODA01512"", ""KODA01512"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""jteks"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""random"", ""random"", ""08/09/1993 00:00:00"", ""F"", ""Sibling"", ""25"", ""9502996647"", ""Mrs"", ""sdew"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", ""Miss"", ""carolina"", ""marin"", ""F"", ""01/10/1965 00:00:00"", """", ""1500000"", ""KODA01512"", ""KODA01512"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        [NUnit.Framework.TestCaseAttribute("Demo Client", "CD000150-Business Loan", "Business Loan", "01/10/1962 00:00:00", "11/03/2023 00:00:00", "", "7", "200000", "No", "Yes", "123", "Joint Life/Co-borrower", "Mr", "BorrowerFirstSix", "SurnameFirstSix", "KODA01513", "KODA01513", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "jteks", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "random", "random", "08/09/1993 00:00:00", "F", "Sibling", "25", "9502996647", "Mrs", "sdew", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "", "", "", "", "", "", "", "", "Miss", "carolina", "marin", "F", "01/10/1965 00:00:00", "", "1500000", "KODA01513", "KODA01513", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"PremiumCalculatorData4Nominees with ""Demo Client"", ""CD000150-Business Loan"", ""Business Loan"", ""01/10/1962 00:00:00"", ""11/03/2023 00:00:00"", """", ""7"", ""200000"", ""No"", ""Yes"", ""123"", ""Joint Life/Co-borrower"", ""Mr"", ""BorrowerFirstSix"", ""SurnameFirstSix"", ""KODA01513"", ""KODA01513"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""jteks"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""random"", ""random"", ""08/09/1993 00:00:00"", ""F"", ""Sibling"", ""25"", ""9502996647"", ""Mrs"", ""sdew"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", ""Miss"", ""carolina"", ""marin"", ""F"", ""01/10/1965 00:00:00"", """", ""1500000"", ""KODA01513"", ""KODA01513"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        [NUnit.Framework.TestCaseAttribute("Demo Client", "CD000150-Business Loan", "Business Loan", "01/10/1962 00:00:00", "11/03/2023 00:00:00", "", "7", "200000", "No", "Yes", "123", "Joint Life/Co-borrower", "Mr", "BorrowerFirstSix", "SurnameFirstSix", "KODA01514", "KODA01514", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "jteks", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "random", "random", "08/09/1993 00:00:00", "F", "Sibling", "25", "9502996647", "Mrs", "sdew", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "", "", "", "", "", "", "", "", "Miss", "carolina", "marin", "F", "01/10/1965 00:00:00", "", "1500000", "KODA01514", "KODA01514", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"PremiumCalculatorData4Nominees with ""Demo Client"", ""CD000150-Business Loan"", ""Business Loan"", ""01/10/1962 00:00:00"", ""11/03/2023 00:00:00"", """", ""7"", ""200000"", ""No"", ""Yes"", ""123"", ""Joint Life/Co-borrower"", ""Mr"", ""BorrowerFirstSix"", ""SurnameFirstSix"", ""KODA01514"", ""KODA01514"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""jteks"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""random"", ""random"", ""08/09/1993 00:00:00"", ""F"", ""Sibling"", ""25"", ""9502996647"", ""Mrs"", ""sdew"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", ""Miss"", ""carolina"", ""marin"", ""F"", ""01/10/1965 00:00:00"", """", ""1500000"", ""KODA01514"", ""KODA01514"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        [NUnit.Framework.TestCaseAttribute("Demo Client", "CD000150-Business Loan", "Business Loan", "01/10/1962 00:00:00", "11/03/2023 00:00:00", "", "7", "200000", "No", "Yes", "123", "Joint Life/Co-borrower", "Mr", "BorrowerFirstSix", "SurnameFirstSix", "KODA01515", "KODA01515", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "jteks", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "random", "random", "08/09/1993 00:00:00", "F", "Sibling", "25", "9502996647", "Mrs", "sdew", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "", "", "", "", "", "", "", "", "Miss", "carolina", "marin", "F", "01/10/1965 00:00:00", "", "1500000", "KODA01515", "KODA01515", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"PremiumCalculatorData4Nominees with ""Demo Client"", ""CD000150-Business Loan"", ""Business Loan"", ""01/10/1962 00:00:00"", ""11/03/2023 00:00:00"", """", ""7"", ""200000"", ""No"", ""Yes"", ""123"", ""Joint Life/Co-borrower"", ""Mr"", ""BorrowerFirstSix"", ""SurnameFirstSix"", ""KODA01515"", ""KODA01515"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""jteks"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""random"", ""random"", ""08/09/1993 00:00:00"", ""F"", ""Sibling"", ""25"", ""9502996647"", ""Mrs"", ""sdew"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", ""Miss"", ""carolina"", ""marin"", ""F"", ""01/10/1965 00:00:00"", """", ""1500000"", ""KODA01515"", ""KODA01515"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        [NUnit.Framework.TestCaseAttribute("Demo Client", "CD000150-Business Loan", "Business Loan", "01/10/1962 00:00:00", "11/03/2023 00:00:00", "", "7", "200000", "No", "Yes", "123", "Joint Life/Co-borrower", "Mr", "BorrowerFirstSix", "SurnameFirstSix", "KODA01516", "KODA01516", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "jteks", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "random", "random", "08/09/1993 00:00:00", "F", "Sibling", "25", "9502996647", "Mrs", "sdew", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "", "", "", "", "", "", "", "", "Miss", "carolina", "marin", "F", "01/10/1965 00:00:00", "", "1500000", "KODA01516", "KODA01516", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"PremiumCalculatorData4Nominees with ""Demo Client"", ""CD000150-Business Loan"", ""Business Loan"", ""01/10/1962 00:00:00"", ""11/03/2023 00:00:00"", """", ""7"", ""200000"", ""No"", ""Yes"", ""123"", ""Joint Life/Co-borrower"", ""Mr"", ""BorrowerFirstSix"", ""SurnameFirstSix"", ""KODA01516"", ""KODA01516"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""jteks"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""random"", ""random"", ""08/09/1993 00:00:00"", ""F"", ""Sibling"", ""25"", ""9502996647"", ""Mrs"", ""sdew"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", ""Miss"", ""carolina"", ""marin"", ""F"", ""01/10/1965 00:00:00"", """", ""1500000"", ""KODA01516"", ""KODA01516"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        [NUnit.Framework.TestCaseAttribute("Demo Client", "CD000150-Business Loan", "Business Loan", "01/10/1962 00:00:00", "11/03/2023 00:00:00", "", "7", "200000", "No", "Yes", "123", "Joint Life/Co-borrower", "Mr", "BorrowerFirstSix", "SurnameFirstSix", "KODA01517", "KODA01517", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "jteks", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "random", "random", "08/09/1993 00:00:00", "F", "Sibling", "25", "9502996647", "Mrs", "sdew", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "", "", "", "", "", "", "", "", "Miss", "carolina", "marin", "F", "01/10/1965 00:00:00", "", "1500000", "KODA01517", "KODA01517", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"PremiumCalculatorData4Nominees with ""Demo Client"", ""CD000150-Business Loan"", ""Business Loan"", ""01/10/1962 00:00:00"", ""11/03/2023 00:00:00"", """", ""7"", ""200000"", ""No"", ""Yes"", ""123"", ""Joint Life/Co-borrower"", ""Mr"", ""BorrowerFirstSix"", ""SurnameFirstSix"", ""KODA01517"", ""KODA01517"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""jteks"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""random"", ""random"", ""08/09/1993 00:00:00"", ""F"", ""Sibling"", ""25"", ""9502996647"", ""Mrs"", ""sdew"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", ""Miss"", ""carolina"", ""marin"", ""F"", ""01/10/1965 00:00:00"", """", ""1500000"", ""KODA01517"", ""KODA01517"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        [NUnit.Framework.TestCaseAttribute("Demo Client", "GH000373-Micro Loans", "Loan Against Property", "06/09/1980 00:00:00", "03/03/2023 00:00:00", "42", "12", "200000", "No", "Yes", "123", "Single Life", "Mr", "BorrowerFirstOne", "SurnameFirstOne", "KODA01518", "KODA01518", "", "", "North", "ANUPGARH", "70.0", "8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Kri" +
            "shna Nagar", "Ammalladinne", "Anantapur dist.", "Andhra Pradesh", "India", "515001", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "sowjanya", "krishnamurthy", "08/09/1992 00:00:00", "F", "Other", "25", "9502996647", "Mrs", "jteks", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "random", "random", "08/09/1993 00:00:00", "F", "Sibling", "25", "9502996647", "Mrs", "sdew", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"PremiumCalculatorData4Nominees with ""Demo Client"", ""GH000373-Micro Loans"", ""Loan Against Property"", ""06/09/1980 00:00:00"", ""03/03/2023 00:00:00"", ""42"", ""12"", ""200000"", ""No"", ""Yes"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstOne"", ""SurnameFirstOne"", ""KODA01518"", ""KODA01518"", """", """", ""North"", ""ANUPGARH"", ""70_0"", ""8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Krishna Nagar"", ""Ammalladinne"", ""Anantapur dist_"", ""Andhra Pradesh"", ""India"", ""515001"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""sowjanya"", ""krishnamurthy"", ""08/09/1992 00:00:00"", ""F"", ""Other"", ""25"", ""9502996647"", ""Mrs"", ""jteks"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""random"", ""random"", ""08/09/1993 00:00:00"", ""F"", ""Sibling"", ""25"", ""9502996647"", ""Mrs"", ""sdew"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        [NUnit.Framework.TestCaseAttribute("Demo Client", "GH000373-Micro Loans", "Loan Against Property", "06/09/1980 00:00:00", "03/03/2023 00:00:00", "42", "12", "200000", "No", "Yes", "123", "Single Life", "Mr", "BorrowerFirstOne", "SurnameFirstOne", "KODA01519", "KODA01519", "", "", "North", "ANUPGARH", "70.0", "8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Kri" +
            "shna Nagar", "Ammalladinne", "Anantapur dist.", "Andhra Pradesh", "India", "515001", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "sowjanya", "krishnamurthy", "08/09/1992 00:00:00", "F", "Other", "25", "9502996647", "Mrs", "jteks", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "random", "random", "08/09/1993 00:00:00", "F", "Sibling", "25", "9502996647", "Mrs", "sdew", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"PremiumCalculatorData4Nominees with ""Demo Client"", ""GH000373-Micro Loans"", ""Loan Against Property"", ""06/09/1980 00:00:00"", ""03/03/2023 00:00:00"", ""42"", ""12"", ""200000"", ""No"", ""Yes"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstOne"", ""SurnameFirstOne"", ""KODA01519"", ""KODA01519"", """", """", ""North"", ""ANUPGARH"", ""70_0"", ""8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Krishna Nagar"", ""Ammalladinne"", ""Anantapur dist_"", ""Andhra Pradesh"", ""India"", ""515001"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""sowjanya"", ""krishnamurthy"", ""08/09/1992 00:00:00"", ""F"", ""Other"", ""25"", ""9502996647"", ""Mrs"", ""jteks"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""random"", ""random"", ""08/09/1993 00:00:00"", ""F"", ""Sibling"", ""25"", ""9502996647"", ""Mrs"", ""sdew"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        [NUnit.Framework.TestCaseAttribute("Demo Client", "GH000373-Micro Loans", "Loan Against Property", "06/09/1980 00:00:00", "03/03/2023 00:00:00", "42", "12", "200000", "No", "Yes", "123", "Single Life", "Mr", "BorrowerFirstOne", "SurnameFirstOne", "KODA01520", "KODA01520", "", "", "North", "ANUPGARH", "70.0", "8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Kri" +
            "shna Nagar", "Ammalladinne", "Anantapur dist.", "Andhra Pradesh", "India", "515001", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "sowjanya", "krishnamurthy", "08/09/1992 00:00:00", "F", "Other", "25", "9502996647", "Mrs", "jteks", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "random", "random", "08/09/1993 00:00:00", "F", "Sibling", "25", "9502996647", "Mrs", "sdew", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"PremiumCalculatorData4Nominees with ""Demo Client"", ""GH000373-Micro Loans"", ""Loan Against Property"", ""06/09/1980 00:00:00"", ""03/03/2023 00:00:00"", ""42"", ""12"", ""200000"", ""No"", ""Yes"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstOne"", ""SurnameFirstOne"", ""KODA01520"", ""KODA01520"", """", """", ""North"", ""ANUPGARH"", ""70_0"", ""8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Krishna Nagar"", ""Ammalladinne"", ""Anantapur dist_"", ""Andhra Pradesh"", ""India"", ""515001"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""sowjanya"", ""krishnamurthy"", ""08/09/1992 00:00:00"", ""F"", ""Other"", ""25"", ""9502996647"", ""Mrs"", ""jteks"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""random"", ""random"", ""08/09/1993 00:00:00"", ""F"", ""Sibling"", ""25"", ""9502996647"", ""Mrs"", ""sdew"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        [NUnit.Framework.TestCaseAttribute("Demo Client", "GH000373-Micro Loans", "Loan Against Property", "06/09/1980 00:00:00", "03/03/2023 00:00:00", "42", "12", "200000", "No", "Yes", "123", "Single Life", "Mr", "BorrowerFirstOne", "SurnameFirstOne", "KODA01521", "KODA01521", "", "", "North", "ANUPGARH", "70.0", "8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Kri" +
            "shna Nagar", "Ammalladinne", "Anantapur dist.", "Andhra Pradesh", "India", "515001", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "sowjanya", "krishnamurthy", "08/09/1992 00:00:00", "F", "Other", "25", "9502996647", "Mrs", "jteks", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "random", "random", "08/09/1993 00:00:00", "F", "Sibling", "25", "9502996647", "Mrs", "sdew", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"PremiumCalculatorData4Nominees with ""Demo Client"", ""GH000373-Micro Loans"", ""Loan Against Property"", ""06/09/1980 00:00:00"", ""03/03/2023 00:00:00"", ""42"", ""12"", ""200000"", ""No"", ""Yes"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstOne"", ""SurnameFirstOne"", ""KODA01521"", ""KODA01521"", """", """", ""North"", ""ANUPGARH"", ""70_0"", ""8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Krishna Nagar"", ""Ammalladinne"", ""Anantapur dist_"", ""Andhra Pradesh"", ""India"", ""515001"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""sowjanya"", ""krishnamurthy"", ""08/09/1992 00:00:00"", ""F"", ""Other"", ""25"", ""9502996647"", ""Mrs"", ""jteks"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""random"", ""random"", ""08/09/1993 00:00:00"", ""F"", ""Sibling"", ""25"", ""9502996647"", ""Mrs"", ""sdew"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        [NUnit.Framework.TestCaseAttribute("Demo Client", "GH000373-Micro Loans", "Loan Against Property", "06/09/1980 00:00:00", "03/03/2023 00:00:00", "42", "12", "200000", "No", "Yes", "123", "Single Life", "Mr", "BorrowerFirstOne", "SurnameFirstOne", "KODA01522", "KODA01522", "", "", "North", "ANUPGARH", "70.0", "8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Kri" +
            "shna Nagar", "Ammalladinne", "Anantapur dist.", "Andhra Pradesh", "India", "515001", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "sowjanya", "krishnamurthy", "08/09/1992 00:00:00", "F", "Other", "25", "9502996647", "Mrs", "jteks", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "random", "random", "08/09/1993 00:00:00", "F", "Sibling", "25", "9502996647", "Mrs", "sdew", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"PremiumCalculatorData4Nominees with ""Demo Client"", ""GH000373-Micro Loans"", ""Loan Against Property"", ""06/09/1980 00:00:00"", ""03/03/2023 00:00:00"", ""42"", ""12"", ""200000"", ""No"", ""Yes"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstOne"", ""SurnameFirstOne"", ""KODA01522"", ""KODA01522"", """", """", ""North"", ""ANUPGARH"", ""70_0"", ""8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Krishna Nagar"", ""Ammalladinne"", ""Anantapur dist_"", ""Andhra Pradesh"", ""India"", ""515001"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""sowjanya"", ""krishnamurthy"", ""08/09/1992 00:00:00"", ""F"", ""Other"", ""25"", ""9502996647"", ""Mrs"", ""jteks"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""random"", ""random"", ""08/09/1993 00:00:00"", ""F"", ""Sibling"", ""25"", ""9502996647"", ""Mrs"", ""sdew"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        [NUnit.Framework.TestCaseAttribute("Demo Client", "GH000373-Micro Loans", "Loan Against Property", "06/09/1980 00:00:00", "03/03/2023 00:00:00", "42", "12", "200000", "No", "Yes", "123", "Single Life", "Mr", "BorrowerFirstOne", "SurnameFirstOne", "KODA01523", "KODA01523", "", "", "North", "ANUPGARH", "70.0", "8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Kri" +
            "shna Nagar", "Ammalladinne", "Anantapur dist.", "Andhra Pradesh", "India", "515001", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "sowjanya", "krishnamurthy", "08/09/1992 00:00:00", "F", "Other", "25", "9502996647", "Mrs", "jteks", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "random", "random", "08/09/1993 00:00:00", "F", "Sibling", "25", "9502996647", "Mrs", "sdew", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"PremiumCalculatorData4Nominees with ""Demo Client"", ""GH000373-Micro Loans"", ""Loan Against Property"", ""06/09/1980 00:00:00"", ""03/03/2023 00:00:00"", ""42"", ""12"", ""200000"", ""No"", ""Yes"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstOne"", ""SurnameFirstOne"", ""KODA01523"", ""KODA01523"", """", """", ""North"", ""ANUPGARH"", ""70_0"", ""8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Krishna Nagar"", ""Ammalladinne"", ""Anantapur dist_"", ""Andhra Pradesh"", ""India"", ""515001"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""sowjanya"", ""krishnamurthy"", ""08/09/1992 00:00:00"", ""F"", ""Other"", ""25"", ""9502996647"", ""Mrs"", ""jteks"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""random"", ""random"", ""08/09/1993 00:00:00"", ""F"", ""Sibling"", ""25"", ""9502996647"", ""Mrs"", ""sdew"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void PremiumCalculatorData4Nominees(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOBDDMMYYYY, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOBDDMMYYYY, 
                    string nOMINEE3NomineesGender, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOBDDMMYYYY, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC1_PremiumCalculator",
                    "Pavan",
                    "DataSource:PremiumCalculatorData4Nominees.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE2NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE2NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE3NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE3NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Gender", nOMINEE3NomineesGender);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE4NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE4NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PremiumCalculatorData4Nominees", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should select {0} and  {1} and Click on preceed button", iSDOGHSMQSUBMITTED, referenceUTRNO_), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7} and Click on Proceed but" +
                        "ton", borrowersFirstName, borrowersSurName, borrowersGender, borrowersMobileNo_, borrowersEmailId, loanID, temporaryLoanID, customerID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and click on proceed button in Borrower" +
                        " address page", borrowersAddressAddressLine1, borrowersAddressAddressLine2, borrowersAddressAddressLine3, borrowersAddressStateUT, borrowersAddressPinCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.Then(string.Format("User should enter first Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} in No" +
                        "minee page and click on Save and submit button", nOMINEE1NomineesSalutationDrMissMrMrsMs, nOMINEE1NomineesFirstName, nOMINEE1NomineesSurName, nOMINEE1NomineesDOBDDMMYYYY, nOMINEE1NomineesGender, nOMINEE1NomineesRelationshipWithBorrower, nOMINEE1ShareIfMultipleNominees, nOMINEE1NomineesMobileNumber, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter Second Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} in N" +
                        "ominee page and click on Save and submit button", nOMINEE2NomineesSalutationDrMissMrMrsMs, nOMINEE2NomineesFirstName, nOMINEE2NomineesSurName, nOMINEE2NomineesDOBDDMMYYYY, nOMINEE2NomineesGender, nOMINEE2NomineesRelationshipWithBorrower, nOMINEE2ShareIfMultipleNominees, nOMINEE2NomineesMobileNumber, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter Third Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} in No" +
                        "minee page and click on Save and submit button", nOMINEE3NomineesSalutationDrMissMrMrsMs, nOMINEE3NomineesFirstName, nOMINEE3NomineesSurName, nOMINEE3NomineesDOBDDMMYYYY, nOMINEE3NomineesGender, nOMINEE3NomineesRelationshipWithBorrower, nOMINEE3ShareIfMultipleNominees, nOMINEE3NomineesMobileNumber, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter fourth Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} in N" +
                        "ominee page and click on Save and submit button", nOMINEE4NomineesSalutationDrMissMrMrsMs, nOMINEE4NomineesFirstName, nOMINEE4NomineesSurName, nOMINEE4NomineesDOBDDMMYYYY, nOMINEE4NomineesGender, nOMINEE4NomineesRelationshipWithBorrower, nOMINEE4ShareIfMultipleNominees, nOMINEE4NomineesMobileNumber, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.When(string.Format("role associated with the loan is joint then user should enter details {0}, {1}, {" +
                        "2}, {3}, {4}, {5}, {6}, {7} in secondary members details", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, secondaryMemberDetailsJointLifeCoBorrowerFirstName, secondaryMemberDetailsJointLifeCoBorrowerSurName, secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, secondaryMemberDetailsJointLifeCoBorrowerEmailID, secondaryMemberDetailsJointLifeCoBorrowerCustomerID, secondaryMemberDetailsJointLifeCoBorrowerLoanId, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("Verify the successful messages and click go to Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Demo Client", "CD000150-Business Loan", "Business Loan", "01/10/1962 00:00:00", "11/03/2023 00:00:00", "", "7", "2100000", "No", "Yes", "123", "Joint Life/Co-borrower", "Mr", "BorrowerFirstSix", "SurnameFirstSix", "KODA01512", "KODA01512", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "jteks", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "random", "random", "08/09/1993 00:00:00", "F", "Sibling", "25", "9502996647", "Mrs", "sdew", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "", "", "", "", "", "", "", "", "Miss", "carolina", "marin", "F", "01/10/1965 00:00:00", "", "1500000", "KODA01512", "KODA01512", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyFIGUserAbleToSubmitTheApplicationWhenCoverAmountIs20LakhsAndUnderwritingStatusShouldBeUpdatedAsSMQ with ""Demo Client"", ""CD000150-Business Loan"", ""Business Loan"", ""01/10/1962 00:00:00"", ""11/03/2023 00:00:00"", """", ""7"", ""2100000"", ""No"", ""Yes"", ""123"", ""Joint Life/Co-borrower"", ""Mr"", ""BorrowerFirstSix"", ""SurnameFirstSix"", ""KODA01512"", ""KODA01512"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""jteks"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""random"", ""random"", ""08/09/1993 00:00:00"", ""F"", ""Sibling"", ""25"", ""9502996647"", ""Mrs"", ""sdew"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", ""Miss"", ""carolina"", ""marin"", ""F"", ""01/10/1965 00:00:00"", """", ""1500000"", ""KODA01512"", ""KODA01512"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        [NUnit.Framework.TestCaseAttribute("Demo Client", "GH000373-Micro Loans", "Loan Against Property", "06/09/1980 00:00:00", "03/03/2023 00:00:00", "42", "12", "2100000", "No", "Yes", "123", "Single Life", "Mr", "BorrowerFirstOne", "SurnameFirstOne", "KODA01518", "KODA01518", "", "", "North", "ANUPGARH", "70.0", "8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Kri" +
            "shna Nagar", "Ammalladinne", "Anantapur dist.", "Andhra Pradesh", "India", "515001", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "sowjanya", "krishnamurthy", "08/09/1992 00:00:00", "F", "Other", "25", "9502996647", "Mrs", "jteks", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "random", "random", "08/09/1993 00:00:00", "F", "Sibling", "25", "9502996647", "Mrs", "sdew", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyFIGUserAbleToSubmitTheApplicationWhenCoverAmountIs20LakhsAndUnderwritingStatusShouldBeUpdatedAsSMQ with ""Demo Client"", ""GH000373-Micro Loans"", ""Loan Against Property"", ""06/09/1980 00:00:00"", ""03/03/2023 00:00:00"", ""42"", ""12"", ""2100000"", ""No"", ""Yes"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstOne"", ""SurnameFirstOne"", ""KODA01518"", ""KODA01518"", """", """", ""North"", ""ANUPGARH"", ""70_0"", ""8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Krishna Nagar"", ""Ammalladinne"", ""Anantapur dist_"", ""Andhra Pradesh"", ""India"", ""515001"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""sowjanya"", ""krishnamurthy"", ""08/09/1992 00:00:00"", ""F"", ""Other"", ""25"", ""9502996647"", ""Mrs"", ""jteks"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""random"", ""random"", ""08/09/1993 00:00:00"", ""F"", ""Sibling"", ""25"", ""9502996647"", ""Mrs"", ""sdew"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyFIGUserAbleToSubmitTheApplicationWhenCoverAmountIs20LakhsAndUnderwritingStatusShouldBeUpdatedAsSMQ(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOBDDMMYYYY, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOBDDMMYYYY, 
                    string nOMINEE3NomineesGender, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOBDDMMYYYY, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Teja",
                    "DataSource:PremiumCalculatorData4Nominees_20laksh.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE2NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE2NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE3NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE3NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Gender", nOMINEE3NomineesGender);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE4NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE4NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify FIG User able to submit the application when cover amount is > 20Lakhs and" +
                    " underwriting status should be updated as SMQ", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should select {0} and  {1} and Click on preceed button", iSDOGHSMQSUBMITTED, referenceUTRNO_), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7} and Click on Proceed but" +
                        "ton", borrowersFirstName, borrowersSurName, borrowersGender, borrowersMobileNo_, borrowersEmailId, loanID, temporaryLoanID, customerID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and click on proceed button in Borrower" +
                        " address page", borrowersAddressAddressLine1, borrowersAddressAddressLine2, borrowersAddressAddressLine3, borrowersAddressStateUT, borrowersAddressPinCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.Then(string.Format("User should enter first Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} in No" +
                        "minee page and click on Save and submit button", nOMINEE1NomineesSalutationDrMissMrMrsMs, nOMINEE1NomineesFirstName, nOMINEE1NomineesSurName, nOMINEE1NomineesDOBDDMMYYYY, nOMINEE1NomineesGender, nOMINEE1NomineesRelationshipWithBorrower, nOMINEE1ShareIfMultipleNominees, nOMINEE1NomineesMobileNumber, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter Second Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} in N" +
                        "ominee page and click on Save and submit button", nOMINEE2NomineesSalutationDrMissMrMrsMs, nOMINEE2NomineesFirstName, nOMINEE2NomineesSurName, nOMINEE2NomineesDOBDDMMYYYY, nOMINEE2NomineesGender, nOMINEE2NomineesRelationshipWithBorrower, nOMINEE2ShareIfMultipleNominees, nOMINEE2NomineesMobileNumber, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter Third Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} in No" +
                        "minee page and click on Save and submit button", nOMINEE3NomineesSalutationDrMissMrMrsMs, nOMINEE3NomineesFirstName, nOMINEE3NomineesSurName, nOMINEE3NomineesDOBDDMMYYYY, nOMINEE3NomineesGender, nOMINEE3NomineesRelationshipWithBorrower, nOMINEE3ShareIfMultipleNominees, nOMINEE3NomineesMobileNumber, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter fourth Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} in N" +
                        "ominee page and click on Save and submit button", nOMINEE4NomineesSalutationDrMissMrMrsMs, nOMINEE4NomineesFirstName, nOMINEE4NomineesSurName, nOMINEE4NomineesDOBDDMMYYYY, nOMINEE4NomineesGender, nOMINEE4NomineesRelationshipWithBorrower, nOMINEE4ShareIfMultipleNominees, nOMINEE4NomineesMobileNumber, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.When(string.Format("role associated with the loan is joint then user should enter details {0}, {1}, {" +
                        "2}, {3}, {4}, {5}, {6}, {7} in secondary members details", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, secondaryMemberDetailsJointLifeCoBorrowerFirstName, secondaryMemberDetailsJointLifeCoBorrowerSurName, secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, secondaryMemberDetailsJointLifeCoBorrowerEmailID, secondaryMemberDetailsJointLifeCoBorrowerCustomerID, secondaryMemberDetailsJointLifeCoBorrowerLoanId, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("Verify the successful messages and click go to Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should able to view the application details in dashboard with Underwriting s" +
                    "tatus - SMQ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Demo Client", "CD000150-Business Loan", "Business Loan", "01/10/1962 00:00:00", "11/03/2023 00:00:00", "", "7", "200000", "No", "Yes", "123", "Joint Life/Co-borrower", "Mr", "BorrowerFirstSix", "SurnameFirstSix", "KODA01612", "KODA01612", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "33", "9502996647", "Mrs", "jteks", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "33", "9502996647", "Mrs", "random", "random", "08/09/1993 00:00:00", "F", "Sibling", "34", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Miss", "carolina", "marin", "F", "01/10/1965 00:00:00", "", "1500000", "KODA01612", "KODA01612", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"_3PremiumCalculatorData4Nominees with ""Demo Client"", ""CD000150-Business Loan"", ""Business Loan"", ""01/10/1962 00:00:00"", ""11/03/2023 00:00:00"", """", ""7"", ""200000"", ""No"", ""Yes"", ""123"", ""Joint Life/Co-borrower"", ""Mr"", ""BorrowerFirstSix"", ""SurnameFirstSix"", ""KODA01612"", ""KODA01612"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""33"", ""9502996647"", ""Mrs"", ""jteks"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""33"", ""9502996647"", ""Mrs"", ""random"", ""random"", ""08/09/1993 00:00:00"", ""F"", ""Sibling"", ""34"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Miss"", ""carolina"", ""marin"", ""F"", ""01/10/1965 00:00:00"", """", ""1500000"", ""KODA01612"", ""KODA01612"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void _3PremiumCalculatorData4Nominees(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOBDDMMYYYY, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOBDDMMYYYY, 
                    string nOMINEE3NomineesGender, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOBDDMMYYYY, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC1_PremiumCalculator",
                    "Pavan",
                    "DataSource:PremiumCalculatorData3Nominees.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE2NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE2NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE3NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE3NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Gender", nOMINEE3NomineesGender);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE4NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE4NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3PremiumCalculatorData4Nominees", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should select {0} and  {1} and Click on preceed button", iSDOGHSMQSUBMITTED, referenceUTRNO_), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7} and Click on Proceed but" +
                        "ton", borrowersFirstName, borrowersSurName, borrowersGender, borrowersMobileNo_, borrowersEmailId, loanID, temporaryLoanID, customerID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and click on proceed button in Borrower" +
                        " address page", borrowersAddressAddressLine1, borrowersAddressAddressLine2, borrowersAddressAddressLine3, borrowersAddressStateUT, borrowersAddressPinCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.Then(string.Format("User should enter first Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} in No" +
                        "minee page and click on Save and submit button", nOMINEE1NomineesSalutationDrMissMrMrsMs, nOMINEE1NomineesFirstName, nOMINEE1NomineesSurName, nOMINEE1NomineesDOBDDMMYYYY, nOMINEE1NomineesGender, nOMINEE1NomineesRelationshipWithBorrower, nOMINEE1ShareIfMultipleNominees, nOMINEE1NomineesMobileNumber, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter Second Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} in N" +
                        "ominee page and click on Save and submit button", nOMINEE2NomineesSalutationDrMissMrMrsMs, nOMINEE2NomineesFirstName, nOMINEE2NomineesSurName, nOMINEE2NomineesDOBDDMMYYYY, nOMINEE2NomineesGender, nOMINEE2NomineesRelationshipWithBorrower, nOMINEE2ShareIfMultipleNominees, nOMINEE2NomineesMobileNumber, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter Third Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} in No" +
                        "minee page and click on Save and submit button", nOMINEE3NomineesSalutationDrMissMrMrsMs, nOMINEE3NomineesFirstName, nOMINEE3NomineesSurName, nOMINEE3NomineesDOBDDMMYYYY, nOMINEE3NomineesGender, nOMINEE3NomineesRelationshipWithBorrower, nOMINEE3ShareIfMultipleNominees, nOMINEE3NomineesMobileNumber, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000150-Business Loan", "Business Loan", "01/10/1962 00:00:00", "11/03/2023 00:00:00", "", "7", "2000000", "No", "No", "123", "Joint Life/Co-borrower", "Mr", "BorrowerFirstSix", "SurnameFirstSix", "KODA02514", "KODA02514", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "8978853433", "durgaprasad.baggu@valuemomentum.com", "T", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "Transgender", "Son", "100", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Miss", "carolina", "marin", "F", "22804", "", "1500000", "KODA02514", "KODA02514", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"TransgenderVerfiyFIGUserAbleToSubmitTheApplicationForPolicyTypeCo_BorrowerForTransGenderAsBorrowerAndNominee with ""Muthoot Finance"", ""CD000150-Business Loan"", ""Business Loan"", ""01/10/1962 00:00:00"", ""11/03/2023 00:00:00"", """", ""7"", ""2000000"", ""No"", ""No"", ""123"", ""Joint Life/Co-borrower"", ""Mr"", ""BorrowerFirstSix"", ""SurnameFirstSix"", ""KODA02514"", ""KODA02514"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""8978853433"", ""durgaprasad_baggu@valuemomentum_com"", ""T"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""Transgender"", ""Son"", ""100"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Miss"", ""carolina"", ""marin"", ""F"", ""22804"", """", ""1500000"", ""KODA02514"", ""KODA02514"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000244-Home Loan", "Loan Against Property", "06/09/1980 00:00:00", "03/03/2023 00:00:00", "42", "10", "1900000", "No", "No", "123", "Single Life", "Mr", "BorrowerFirstOne", "SurnameFirstOne", "KODA01515", "KODA01515", "", "", "North", "ANUPGARH", "70.0", "8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Kri" +
            "shna Nagar", "Ammalladinne", "Anantapur dist.", "Andhra Pradesh", "India", "515001", "9441383164", "pavan.dinavahi@valuemomentum.com", "T", "", "Mrs", "sowjanya", "krishnamurthy", "10/10/2006 00:00:00", "Transgender", "Other", "100", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Mr", "Krishna Murthy", "Gudipala", "M", "Married", "06/08/1990 00:00:00", "", "Other", "", "", "", "", "", "0", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"TransgenderVerfiyFIGUserAbleToSubmitTheApplicationForPolicyTypeCo_BorrowerForTransGenderAsBorrowerAndNominee with ""Muthoot Finance"", ""CD000244-Home Loan"", ""Loan Against Property"", ""06/09/1980 00:00:00"", ""03/03/2023 00:00:00"", ""42"", ""10"", ""1900000"", ""No"", ""No"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstOne"", ""SurnameFirstOne"", ""KODA01515"", ""KODA01515"", """", """", ""North"", ""ANUPGARH"", ""70_0"", ""8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Krishna Nagar"", ""Ammalladinne"", ""Anantapur dist_"", ""Andhra Pradesh"", ""India"", ""515001"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""T"", """", ""Mrs"", ""sowjanya"", ""krishnamurthy"", ""10/10/2006 00:00:00"", ""Transgender"", ""Other"", ""100"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Mr"", ""Krishna Murthy"", ""Gudipala"", ""M"", ""Married"", ""06/08/1990 00:00:00"", """", ""Other"", """", """", """", """", """", ""0"", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void TransgenderVerfiyFIGUserAbleToSubmitTheApplicationForPolicyTypeCo_BorrowerForTransGenderAsBorrowerAndNominee(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC1_PremiumCalculator",
                    "Pavan",
                    "DataSource:CoborrowerNominee_Transgender.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transgender Verfiy FIG User able to submit the application for policy type : Co-b" +
                    "orrower for TransGender as borrower and nominee", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should select {0} and  {1} and Click on preceed button", iSDOGHSMQSUBMITTED, referenceUTRNO_), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7} and Click on Proceed but" +
                        "ton", borrowersFirstName, borrowersSurName, borrowersGender, borrowersMobileNo_, borrowersEmailId, loanID, temporaryLoanID, customerID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and click on proceed button in Borrower" +
                        " address page", borrowersAddressAddressLine1, borrowersAddressAddressLine2, borrowersAddressAddressLine3, borrowersAddressStateUT, borrowersAddressPinCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.Then(string.Format("User should enter Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} in Nominee " +
                        "page and click on Save and submit button", nOMINEE1NomineesSalutationDrMissMrMrsMs, nOMINEE1NomineesFirstName, nOMINEE1NomineesSurName, nOMINEE1NomineesDOBDDMMYYYY, nOMINEE1NomineesGender, nOMINEE1NomineesRelationshipWithBorrower, nOMINEE1ShareIfMultipleNominees, nOMINEE1NomineesMobileNumber, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.When(string.Format("Nominee is less than eighteen years user should enter Appointee details {0}, {1}," +
                        " {2}, {3}, {4}, {5}, {6}, {7}, {8} in Appointee page and click on Save and submi" +
                        "t button", appointeesSalutationDrMissMrMrsMs, appointeesFirstName, appointeesSurName, appointeesGender, appointeesMaritalStatus, appointeesDOBDDMMYYYY, appointeesIDNO_, appointeesRelationshipWithTheBorrower, nOMINEE1NomineesDOBDDMMYYYY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.When(string.Format("role associated with the loan is joint then user should enter details {0}, {1}, {" +
                        "2}, {3}, {4}, {5}, {6}, {7} in secondary members details", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, secondaryMemberDetailsJointLifeCoBorrowerFirstName, secondaryMemberDetailsJointLifeCoBorrowerSurName, secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, secondaryMemberDetailsJointLifeCoBorrowerEmailID, secondaryMemberDetailsJointLifeCoBorrowerCustomerID, secondaryMemberDetailsJointLifeCoBorrowerLoanId, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("Verify the successful messages and click go to Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Demo Client", "CD000150-Business Loan", "Business Loan", "01/10/1962 00:00:00", "11/03/2023 00:00:00", "", "7", "2000000", "No", "No", "123", "Joint Life/Co-borrower", "Mr", "BorrowerFirstSix", "SurnameFirstSix", "KODA00511", "KODA00511", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "8978853433", "durgaprasad.baggu@valuemomentum.com", "M", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "100", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Miss", "carolina", "marin", "F", "01/10/1965 00:00:00", "", "1500000", "KODA00511", "KODA00511", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyPremiumCalculatorFlow with ""Demo Client"", ""CD000150-Business Loan"", ""Business Loan"", ""01/10/1962 00:00:00"", ""11/03/2023 00:00:00"", """", ""7"", ""2000000"", ""No"", ""No"", ""123"", ""Joint Life/Co-borrower"", ""Mr"", ""BorrowerFirstSix"", ""SurnameFirstSix"", ""KODA00511"", ""KODA00511"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""8978853433"", ""durgaprasad_baggu@valuemomentum_com"", ""M"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""100"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Miss"", ""carolina"", ""marin"", ""F"", ""01/10/1965 00:00:00"", """", ""1500000"", ""KODA00511"", ""KODA00511"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        [NUnit.Framework.TestCaseAttribute("Demo Client", "GH000373-Micro Loans", "Loan Against Property", "06/09/1980 00:00:00", "03/03/2023 00:00:00", "42", "12", "200000", "No", "No", "123", "Single Life", "Mr", "BorrowerFirstOne", "SurnameFirstOne", "KODA00512", "KODA00512", "", "", "North", "ANUPGARH", "70.0", "8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Kri" +
            "shna Nagar", "Ammalladinne", "Anantapur dist.", "Andhra Pradesh", "India", "515001", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "sowjanya", "krishnamurthy", "10/10/2006 00:00:00", "F", "Other", "100", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Mr", "Krishna Murthy", "Gudipala", "M", "Married", "06/08/1990 00:00:00", "", "Other", "", "", "", "", "", "0", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyPremiumCalculatorFlow with ""Demo Client"", ""GH000373-Micro Loans"", ""Loan Against Property"", ""06/09/1980 00:00:00"", ""03/03/2023 00:00:00"", ""42"", ""12"", ""200000"", ""No"", ""No"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstOne"", ""SurnameFirstOne"", ""KODA00512"", ""KODA00512"", """", """", ""North"", ""ANUPGARH"", ""70_0"", ""8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Krishna Nagar"", ""Ammalladinne"", ""Anantapur dist_"", ""Andhra Pradesh"", ""India"", ""515001"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""sowjanya"", ""krishnamurthy"", ""10/10/2006 00:00:00"", ""F"", ""Other"", ""100"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Mr"", ""Krishna Murthy"", ""Gudipala"", ""M"", ""Married"", ""06/08/1990 00:00:00"", """", ""Other"", """", """", """", """", """", ""0"", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyPremiumCalculatorFlow(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC1_PremiumCalculator",
                    "Demo",
                    "DataSource:PremiumCalculatorData.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Premium Calculator Flow", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should select {0} and  {1} and Click on preceed button", iSDOGHSMQSUBMITTED, referenceUTRNO_), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7} and Click on Proceed but" +
                        "ton", borrowersFirstName, borrowersSurName, borrowersGender, borrowersMobileNo_, borrowersEmailId, loanID, temporaryLoanID, customerID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and click on proceed button in Borrower" +
                        " address page", borrowersAddressAddressLine1, borrowersAddressAddressLine2, borrowersAddressAddressLine3, borrowersAddressStateUT, borrowersAddressPinCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.Then(string.Format("User should enter Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} in Nominee " +
                        "page and click on Save and submit button", nOMINEE1NomineesSalutationDrMissMrMrsMs, nOMINEE1NomineesFirstName, nOMINEE1NomineesSurName, nOMINEE1NomineesDOBDDMMYYYY, nOMINEE1NomineesGender, nOMINEE1NomineesRelationshipWithBorrower, nOMINEE1ShareIfMultipleNominees, nOMINEE1NomineesMobileNumber, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.When(string.Format("Nominee is less than eighteen years user should enter Appointee details {0}, {1}," +
                        " {2}, {3}, {4}, {5}, {6}, {7}, {8} in Appointee page and click on Save and submi" +
                        "t button", appointeesSalutationDrMissMrMrsMs, appointeesFirstName, appointeesSurName, appointeesGender, appointeesMaritalStatus, appointeesDOBDDMMYYYY, appointeesIDNO_, appointeesRelationshipWithTheBorrower, nOMINEE1NomineesDOBDDMMYYYY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.When(string.Format("role associated with the loan is joint then user should enter details {0}, {1}, {" +
                        "2}, {3}, {4}, {5}, {6}, {7} in secondary members details", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, secondaryMemberDetailsJointLifeCoBorrowerFirstName, secondaryMemberDetailsJointLifeCoBorrowerSurName, secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, secondaryMemberDetailsJointLifeCoBorrowerEmailID, secondaryMemberDetailsJointLifeCoBorrowerCustomerID, secondaryMemberDetailsJointLifeCoBorrowerLoanId, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("Verify the successful messages and click go to Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000150-Business Loan", "Business Loan", "01/10/1962 00:00:00", "11/03/2023 00:00:00", "", "7", "2000000", "No", "No", "123", "Single Life", "Mr", "BorrowerFirstSix", "SurnameFirstSix", "KODQAQ00511", "KAA00511", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "8688398973", "Nikhila.Duvva@valuemomentum.com", "F", "", "Mrs", "christina", "joseph", "01/01/2005 00:00:00", "F", "Daughter", "100", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyFIGUserAbleToViewTheBelowFieldsInBorrowerAddressDetailsPage_AddressLine1AddressLine2AddressLine3SatePinCode with ""Muthoot Finance"", ""CD000150-Business Loan"", ""Business Loan"", ""01/10/1962 00:00:00"", ""11/03/2023 00:00:00"", """", ""7"", ""2000000"", ""No"", ""No"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstSix"", ""SurnameFirstSix"", ""KODQAQ00511"", ""KAA00511"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""8688398973"", ""Nikhila_Duvva@valuemomentum_com"", ""F"", """", ""Mrs"", ""christina"", ""joseph"", ""01/01/2005 00:00:00"", ""F"", ""Daughter"", ""100"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyFIGUserAbleToViewTheBelowFieldsInBorrowerAddressDetailsPage_AddressLine1AddressLine2AddressLine3SatePinCode(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ID_22_Nikhila_(PremiumCalculator)",
                    "DataSource:ID11.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify FIG User able to view the below fields in Borrower Address details page - " +
                    "Address line1, Address line 2, Address line3, Sate, Pin Code", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should select {0} and  {1} and Click on preceed button", iSDOGHSMQSUBMITTED, referenceUTRNO_), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7} and Click on Proceed but" +
                        "ton", borrowersFirstName, borrowersSurName, borrowersGender, borrowersMobileNo_, borrowersEmailId, loanID, temporaryLoanID, customerID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Validate Borrower\'s Address page elements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000150-Business Loan", "Business Loan", "01/10/1962 00:00:00", "11/03/2023 00:00:00", "", "7", "2000000", "No", "No", "123", "Single Life", "Mr", "BorrowerFirstSix", "SurnameFirstSix", "KODQAQ00511", "KAA00511", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "8688398973", "Nikhila.Duvva@valuemomentum.com", "F", "", "Mrs", "christina", "joseph", "01/01/2005 00:00:00", "F", "Daughter", "100", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyUserAbleToViewTheFieldsInBorrowerAddressDetailsPage_AddressLine1AddressLine2AddressLine3StatePinCode with ""Muthoot Finance"", ""CD000150-Business Loan"", ""Business Loan"", ""01/10/1962 00:00:00"", ""11/03/2023 00:00:00"", """", ""7"", ""2000000"", ""No"", ""No"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstSix"", ""SurnameFirstSix"", ""KODQAQ00511"", ""KAA00511"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""8688398973"", ""Nikhila_Duvva@valuemomentum_com"", ""F"", """", ""Mrs"", ""christina"", ""joseph"", ""01/01/2005 00:00:00"", ""F"", ""Daughter"", ""100"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyUserAbleToViewTheFieldsInBorrowerAddressDetailsPage_AddressLine1AddressLine2AddressLine3StatePinCode(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ID_19_Nikhila(PremiumCalculator)",
                    "DataSource:ID11.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User able to view the fields in Borrower Address details page - Address li" +
                    "ne1, Address line 2, Address line3, State, Pin Code", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("validate premium output page elements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000150-Business Loan", "Business Loan", "10/10/2004 00:00:00", "11/03/2023 00:00:00", "", "12", "2000000", "No", "No", "123", "Joint Life/Co-borrower", "Mr", "Modi", "Mowa", "KODA00599", "KODA00599", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "8978853433", "durgaprasad.baggu@valuemomentum.com", "M", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "Yuva", "uva", "08/09/1992 00:00:00", "F", "Mother", "25", "9502996647", "Mr", "Naga", "nag", "08/09/1990 00:00:00", "M", "Father", "25", "", "Mr", "Teja", "tej", "12/04/2000 00:00:00", "M", "Brother", "25", "9502996647", "", "", "", "", "", "", "", "", "Miss", "carolina", "marin", "F", "22101970", "", "1500000", "KODA00599", "KODA00599", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyFIGUserAbleToSubmitTheApplicationAfterClickingOnEditOptionInPremiumCalculatorPageForSingleLifePolicy with ""Muthoot Finance"", ""CD000150-Business Loan"", ""Business Loan"", ""10/10/2004 00:00:00"", ""11/03/2023 00:00:00"", """", ""12"", ""2000000"", ""No"", ""No"", ""123"", ""Joint Life/Co-borrower"", ""Mr"", ""Modi"", ""Mowa"", ""KODA00599"", ""KODA00599"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""8978853433"", ""durgaprasad_baggu@valuemomentum_com"", ""M"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""Yuva"", ""uva"", ""08/09/1992 00:00:00"", ""F"", ""Mother"", ""25"", ""9502996647"", ""Mr"", ""Naga"", ""nag"", ""08/09/1990 00:00:00"", ""M"", ""Father"", ""25"", """", ""Mr"", ""Teja"", ""tej"", ""12/04/2000 00:00:00"", ""M"", ""Brother"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", ""Miss"", ""carolina"", ""marin"", ""F"", ""22101970"", """", ""1500000"", ""KODA00599"", ""KODA00599"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyFIGUserAbleToSubmitTheApplicationAfterClickingOnEditOptionInPremiumCalculatorPageForSingleLifePolicy(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teja3(9)",
                    "DataSource:PremiumCalculatorDataTeja2.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify FIG user able to submit the application after clicking on \"Edit\" option in" +
                    " premium calculator page for single life policy", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Enter Suraksha Portal URL in the browser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.When("Enter Emaild ID and Password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("Click on Sign In button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("fill all the details as Single life", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And("User shoud click on Edit after premium got successfully calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3},  and {4} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, , {2}, {3} and {4} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should select {0} and  {1} and Click on preceed button", iSDOGHSMQSUBMITTED, referenceUTRNO_), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7} and Click on Proceed but" +
                        "ton", borrowersFirstName, borrowersSurName, borrowersGender, borrowersMobileNo_, borrowersEmailId, loanID, temporaryLoanID, customerID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and click on proceed button in Borrower" +
                        " address page", borrowersAddressAddressLine1, borrowersAddressAddressLine2, borrowersAddressAddressLine3, borrowersAddressStateUT, borrowersAddressPinCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.Then(string.Format("User should enter Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, <NOMINEE #1: Nominee" +
                        "\'s  Mobile Number>, {7} in Nominee page and click on Save and submit button", nOMINEE1NomineesSalutationDrMissMrMrsMs, nOMINEE1NomineesFirstName, nOMINEE1NomineesSurName, nOMINEE1NomineesDOBDDMMYYYY, nOMINEE1NomineesGender, nOMINEE1NomineesRelationshipWithBorrower, nOMINEE1ShareIfMultipleNominees, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.When(string.Format("Nominee is less than eighteen years user should enter Appointee details {0}, {1}," +
                        " {2}, {3}, {4}, {5}, {6}, {7}, {8} in Appointee page and click on Save and submi" +
                        "t button", appointeesSalutationDrMissMrMrsMs, appointeesFirstName, appointeesSurName, appointeesGender, appointeesMaritalStatus, appointeesDOBDDMMYYYY, appointeesIDNO_, appointeesRelationshipWithTheBorrower, nOMINEE1NomineesDOBDDMMYYYY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.When(string.Format("role associated with the loan is joint then user should enter details {0}, {1}, {" +
                        "2}, {3}, <Secondary Member details (Joint Life/Co borrower):  Email ID>, {4}, {5" +
                        "}, {6} in secondary members details", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, secondaryMemberDetailsJointLifeCoBorrowerFirstName, secondaryMemberDetailsJointLifeCoBorrowerSurName, secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, secondaryMemberDetailsJointLifeCoBorrowerCustomerID, secondaryMemberDetailsJointLifeCoBorrowerLoanId, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("Verify the successful messages and click go to Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute(@"Verify FIG User able to enter values for the following fields in premium calculator screen like Region, Financial Institution, Branch, Policy No - policy name,Policy Type, Mode, Borrower State, Date of Birth of Insured customer, Date of commencement of loan/cover, Age (in years) at commencement, Gender, Total Tenure (months/years), Cover Amount(Sanctioned Loan Amount), Is Premium Funded")]
        [NUnit.Framework.CategoryAttribute("teja4(13)")]
        public virtual void VerifyFIGUserAbleToEnterValuesForTheFollowingFieldsInPremiumCalculatorScreenLikeRegionFinancialInstitutionBranchPolicyNo_PolicyNamePolicyTypeModeBorrowerStateDateOfBirthOfInsuredCustomerDateOfCommencementOfLoanCoverAgeInYearsAtCommencementGenderTotalTenureMonthsYearsCoverAmountSanctionedLoanAmountIsPremiumFunded()
        {
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"Verify FIG User able to enter values for the following fields in premium calculator screen like Region, Financial Institution, Branch, Policy No - policy name,Policy Type, Mode, Borrower State, Date of Birth of Insured customer, Date of commencement of loan/cover, Age (in years) at commencement, Gender, Total Tenure (months/years), Cover Amount(Sanctioned Loan Amount), Is Premium Funded", null, new string[] {
                        "teja4(13)"}, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Enter Suraksha Portal URL in the browser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.When("Enter Emaild ID and Password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("Click on Sign In button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should able to enter/select the values successfully in firstPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000150-Business Loan", "Business Loan", "10/10/2004 00:00:00", "11/03/2023 00:00:00", "", "12", "2000000", "No", "No", "123", "Joint Life/Co-borrower", "Mr", "Modi", "Mowa", "KODA00599", "KODA00599", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "8978853433", "durgaprasad.baggu@valuemomentum.com", "M", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "Yuva", "uva", "08/09/1992 00:00:00", "F", "Mother", "25", "9502996647", "Mr", "Naga", "nag", "08/09/1990 00:00:00", "M", "Father", "25", "", "Mr", "Teja", "tej", "12/04/2000 00:00:00", "M", "Brother", "25", "9502996647", "", "", "", "", "", "", "", "", "Miss", "carolina", "marin", "F", "22101970", "", "1500000", "KODA00599", "KODA00599", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyFIGUserAbleToCalculatePremiumByProvidingDOBOfInsuredCustomerAbove18YearsAndBelow60FromTheCurrentDate_ with ""Muthoot Finance"", ""CD000150-Business Loan"", ""Business Loan"", ""10/10/2004 00:00:00"", ""11/03/2023 00:00:00"", """", ""12"", ""2000000"", ""No"", ""No"", ""123"", ""Joint Life/Co-borrower"", ""Mr"", ""Modi"", ""Mowa"", ""KODA00599"", ""KODA00599"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""8978853433"", ""durgaprasad_baggu@valuemomentum_com"", ""M"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""Yuva"", ""uva"", ""08/09/1992 00:00:00"", ""F"", ""Mother"", ""25"", ""9502996647"", ""Mr"", ""Naga"", ""nag"", ""08/09/1990 00:00:00"", ""M"", ""Father"", ""25"", """", ""Mr"", ""Teja"", ""tej"", ""12/04/2000 00:00:00"", ""M"", ""Brother"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", ""Miss"", ""carolina"", ""marin"", ""F"", ""22101970"", """", ""1500000"", ""KODA00599"", ""KODA00599"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyFIGUserAbleToCalculatePremiumByProvidingDOBOfInsuredCustomerAbove18YearsAndBelow60FromTheCurrentDate_(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teja(17)",
                    "DataSource:PremiumCalculatorDataTeja2.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify FIG User able to calculate premium by providing DOB of Insured customer ab" +
                    "ove 18 years and below 60 from the current date.", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And("Premium should get calculated sucessfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000150-Business Loan", "Business Loan", "10/10/2004 00:00:00", "11/03/2023 00:00:00", "", "12", "2000000", "No", "No", "123", "Joint Life/Co-borrower", "Mr", "Modi", "Mowa", "KODA00599", "KODA00599", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "8978853433", "durgaprasad.baggu@valuemomentum.com", "M", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "Yuva", "uva", "08/09/1992 00:00:00", "F", "Mother", "25", "9502996647", "Mr", "Naga", "nag", "08/09/1990 00:00:00", "M", "Father", "25", "", "Mr", "Teja", "tej", "12/04/2000 00:00:00", "M", "Brother", "25", "9502996647", "", "", "", "", "", "", "", "", "Miss", "carolina", "marin", "F", "22101970", "", "1500000", "KODA00599", "KODA00599", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyFIGUserAbleToViewTheFieldsInEditableAfterClickingOnPremiumCalculatorOutputPageAfterSuccessfulPremiumCalculation_ with ""Muthoot Finance"", ""CD000150-Business Loan"", ""Business Loan"", ""10/10/2004 00:00:00"", ""11/03/2023 00:00:00"", """", ""12"", ""2000000"", ""No"", ""No"", ""123"", ""Joint Life/Co-borrower"", ""Mr"", ""Modi"", ""Mowa"", ""KODA00599"", ""KODA00599"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""8978853433"", ""durgaprasad_baggu@valuemomentum_com"", ""M"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""Yuva"", ""uva"", ""08/09/1992 00:00:00"", ""F"", ""Mother"", ""25"", ""9502996647"", ""Mr"", ""Naga"", ""nag"", ""08/09/1990 00:00:00"", ""M"", ""Father"", ""25"", """", ""Mr"", ""Teja"", ""tej"", ""12/04/2000 00:00:00"", ""M"", ""Brother"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", ""Miss"", ""carolina"", ""marin"", ""F"", ""22101970"", """", ""1500000"", ""KODA00599"", ""KODA00599"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyFIGUserAbleToViewTheFieldsInEditableAfterClickingOnPremiumCalculatorOutputPageAfterSuccessfulPremiumCalculation_(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teja20",
                    "DataSource:PremiumCalculatorDataTeja2.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify FIG user able to view the fields in editable after clicking on \"Premium Ca" +
                    "lculator Output\" page after successful premium calculation.", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And("Premium should get calculated sucessfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("DOGH Submitted and Reference/UTR No should be in editable in premium calculator o" +
                    "uput page.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000150-Business Loan", "Business Loan", "10/10/2004 00:00:00", "11/03/2023 00:00:00", "", "12", "2000000", "No", "No", "123", "Joint Life/Co-borrower", "Mr", "Modi", "Mowa", "KODA00599", "KODA00599", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "8978853433", "durgaprasad.baggu@valuemomentum.com", "M", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "25", "9502996647", "Mrs", "Yuva", "uva", "08/09/1992 00:00:00", "F", "Mother", "25", "9502996647", "Mr", "Naga", "nag", "08/09/1990 00:00:00", "M", "Father", "25", "", "Mr", "Teja", "tej", "12/04/2000 00:00:00", "M", "Brother", "25", "9502996647", "", "", "", "", "", "", "", "", "Miss", "carolina", "marin", "F", "22101970", "", "1500000", "KODA00599", "KODA00599", "", "9441383164", "pavan.dinavahi@valuemomentum.com", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyFIGUserAbleToEnterMandatoryDetailsForBorrowersAddressLine1Line2Line3StateUTCountryPincodeMobileNoAndEmailIdAfterClickingOnBorrowersAddressTab with ""Muthoot Finance"", ""CD000150-Business Loan"", ""Business Loan"", ""10/10/2004 00:00:00"", ""11/03/2023 00:00:00"", """", ""12"", ""2000000"", ""No"", ""No"", ""123"", ""Joint Life/Co-borrower"", ""Mr"", ""Modi"", ""Mowa"", ""KODA00599"", ""KODA00599"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""8978853433"", ""durgaprasad_baggu@valuemomentum_com"", ""M"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""25"", ""9502996647"", ""Mrs"", ""Yuva"", ""uva"", ""08/09/1992 00:00:00"", ""F"", ""Mother"", ""25"", ""9502996647"", ""Mr"", ""Naga"", ""nag"", ""08/09/1990 00:00:00"", ""M"", ""Father"", ""25"", """", ""Mr"", ""Teja"", ""tej"", ""12/04/2000 00:00:00"", ""M"", ""Brother"", ""25"", ""9502996647"", """", """", """", """", """", """", """", """", ""Miss"", ""carolina"", ""marin"", ""F"", ""22101970"", """", ""1500000"", ""KODA00599"", ""KODA00599"", """", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyFIGUserAbleToEnterMandatoryDetailsForBorrowersAddressLine1Line2Line3StateUTCountryPincodeMobileNoAndEmailIdAfterClickingOnBorrowersAddressTab(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teja(23)",
                    "DataSource:PremiumCalculatorDataTeja2.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify FIG User able to enter mandatory details for Borrower\'s Address(line 1, li" +
                    "ne 2, line 3, State/UT, Country, pincode, mobile no and email id)after clicking " +
                    "on Borrower\'s address tab", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Enter Suraksha Portal URL in the browser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.When("Enter Emaild ID and Password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("Click on Sign In button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should select {0} and  {1} and Click on preceed button", iSDOGHSMQSUBMITTED, referenceUTRNO_), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7} and Click on Proceed but" +
                        "ton", borrowersFirstName, borrowersSurName, borrowersGender, borrowersMobileNo_, borrowersEmailId, loanID, temporaryLoanID, customerID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should able to add the data for all the fields in Borrower Address details t" +
                    "ab.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "GH000373-Micro Loans", "Business Loan", "01/10/1964 00:00:00", "11/03/2023 00:00:00", "", "12", "200000", "No", "No", "123", "Single Life", "Mr", "BorrowerFirstSix", "SurnameFirstSix", "KODA00768", "KODA00768", "", "", "North", "ANUPGARH", "", "12-124/1, beside srinivasa theatre, Srinivasa Nagar", "", "kodad", "TELANGANA", "India", "508206", "8978853433", "durgaprasad.baggu@valuemomentum.com", "M", "", "Mrs", "christina", "joseph", "08/09/1992 00:00:00", "F", "Daughter", "100", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyFIGUserAbleToSubmitTheApplicationUsingPolicyGH000373OrGH000044AndTenure12Months with ""Muthoot Finance"", ""GH000373-Micro Loans"", ""Business Loan"", ""01/10/1964 00:00:00"", ""11/03/2023 00:00:00"", """", ""12"", ""200000"", ""No"", ""No"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstSix"", ""SurnameFirstSix"", ""KODA00768"", ""KODA00768"", """", """", ""North"", ""ANUPGARH"", """", ""12-124/1, beside srinivasa theatre, Srinivasa Nagar"", """", ""kodad"", ""TELANGANA"", ""India"", ""508206"", ""8978853433"", ""durgaprasad_baggu@valuemomentum_com"", ""M"", """", ""Mrs"", ""christina"", ""joseph"", ""08/09/1992 00:00:00"", ""F"", ""Daughter"", ""100"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyFIGUserAbleToSubmitTheApplicationUsingPolicyGH000373OrGH000044AndTenure12Months(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "durgaTestCase6",
                    "DataSource:PremiumCalculatorDataGH000373.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify FIG user able to submit the application using Policy GH000373 or GH000044 " +
                    "and tenure 12 months", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should select {0} and  {1} and Click on preceed button", iSDOGHSMQSUBMITTED, referenceUTRNO_), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7} and Click on Proceed but" +
                        "ton", borrowersFirstName, borrowersSurName, borrowersGender, borrowersMobileNo_, borrowersEmailId, loanID, temporaryLoanID, customerID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and click on proceed button in Borrower" +
                        " address page", borrowersAddressAddressLine1, borrowersAddressAddressLine2, borrowersAddressAddressLine3, borrowersAddressStateUT, borrowersAddressPinCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.Then(string.Format("User should enter Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} in Nominee " +
                        "page and click on Save and submit button", nOMINEE1NomineesSalutationDrMissMrMrsMs, nOMINEE1NomineesFirstName, nOMINEE1NomineesSurName, nOMINEE1NomineesDOBDDMMYYYY, nOMINEE1NomineesGender, nOMINEE1NomineesRelationshipWithBorrower, nOMINEE1ShareIfMultipleNominees, nOMINEE1NomineesMobileNumber, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.When(string.Format("Nominee is less than eighteen years user should enter Appointee details {0}, {1}," +
                        " {2}, {3}, {4}, {5}, {6}, {7}, {8} in Appointee page and click on Save and submi" +
                        "t button", appointeesSalutationDrMissMrMrsMs, appointeesFirstName, appointeesSurName, appointeesGender, appointeesMaritalStatus, appointeesDOBDDMMYYYY, appointeesIDNO_, appointeesRelationshipWithTheBorrower, nOMINEE1NomineesDOBDDMMYYYY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.When(string.Format("role associated with the loan is joint then user should enter details {0}, {1}, {" +
                        "2}, {3}, {4}, {5}, {6}, {7} in secondary members details", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, secondaryMemberDetailsJointLifeCoBorrowerFirstName, secondaryMemberDetailsJointLifeCoBorrowerSurName, secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, secondaryMemberDetailsJointLifeCoBorrowerEmailID, secondaryMemberDetailsJointLifeCoBorrowerCustomerID, secondaryMemberDetailsJointLifeCoBorrowerLoanId, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("Verify the successful messages and click go to Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000244-Home Loan", "Loan Against Property", "06/09/1980 00:00:00", "03/03/2023 00:00:00", "42", "10", "1900000", "No", "No", "123", "Single Life", "Mr", "BorrowerFirstOne", "SurnameFirstOne", "KODA01593", "KODA01593", "", "", "North", "ANUPGARH", "70.0", "8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Kri" +
            "shna Nagar", "Ammalladinne", "Anantapur dist.", "Andhra Pradesh", "India", "515001", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "sowjanya", "krishnamurthy", "10/10/2010 00:00:00", "F", "Other", "100", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Mr", "Krishna Murthy", "Gudipala", "M", "Married", "06/08/1990 00:00:00", "", "Other", "", "", "", "", "", "0", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyFIGUserAbleToSubmitTheApplicationForSingleLifePolicyTypeByAddingSingleNomineeWith100Share with ""Muthoot Finance"", ""CD000244-Home Loan"", ""Loan Against Property"", ""06/09/1980 00:00:00"", ""03/03/2023 00:00:00"", ""42"", ""10"", ""1900000"", ""No"", ""No"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstOne"", ""SurnameFirstOne"", ""KODA01593"", ""KODA01593"", """", """", ""North"", ""ANUPGARH"", ""70_0"", ""8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Krishna Nagar"", ""Ammalladinne"", ""Anantapur dist_"", ""Andhra Pradesh"", ""India"", ""515001"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""sowjanya"", ""krishnamurthy"", ""10/10/2010 00:00:00"", ""F"", ""Other"", ""100"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Mr"", ""Krishna Murthy"", ""Gudipala"", ""M"", ""Married"", ""06/08/1990 00:00:00"", """", ""Other"", """", """", """", """", """", ""0"", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyFIGUserAbleToSubmitTheApplicationForSingleLifePolicyTypeByAddingSingleNomineeWith100Share(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "durgaTestCase10",
                    "DataSource:PremiumCalculatorDataNominee100percentshare.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify FIG User able to submit the application for single life policy type by add" +
                    "ing single nominee with 100 share", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should select {0} and  {1} and Click on preceed button", iSDOGHSMQSUBMITTED, referenceUTRNO_), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7} and Click on Proceed but" +
                        "ton", borrowersFirstName, borrowersSurName, borrowersGender, borrowersMobileNo_, borrowersEmailId, loanID, temporaryLoanID, customerID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and click on proceed button in Borrower" +
                        " address page", borrowersAddressAddressLine1, borrowersAddressAddressLine2, borrowersAddressAddressLine3, borrowersAddressStateUT, borrowersAddressPinCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.Then(string.Format("User should enter Nominee {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} in Nominee " +
                        "page and click on Save and submit button", nOMINEE1NomineesSalutationDrMissMrMrsMs, nOMINEE1NomineesFirstName, nOMINEE1NomineesSurName, nOMINEE1NomineesDOBDDMMYYYY, nOMINEE1NomineesGender, nOMINEE1NomineesRelationshipWithBorrower, nOMINEE1ShareIfMultipleNominees, nOMINEE1NomineesMobileNumber, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.When(string.Format("Nominee is less than eighteen years user should enter Appointee details {0}, {1}," +
                        " {2}, {3}, {4}, {5}, {6}, {7}, {8} in Appointee page and click on Save and submi" +
                        "t button", appointeesSalutationDrMissMrMrsMs, appointeesFirstName, appointeesSurName, appointeesGender, appointeesMaritalStatus, appointeesDOBDDMMYYYY, appointeesIDNO_, appointeesRelationshipWithTheBorrower, nOMINEE1NomineesDOBDDMMYYYY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.When(string.Format("role associated with the loan is joint then user should enter details {0}, {1}, {" +
                        "2}, {3}, {4}, {5}, {6}, {7} in secondary members details", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, secondaryMemberDetailsJointLifeCoBorrowerFirstName, secondaryMemberDetailsJointLifeCoBorrowerSurName, secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, secondaryMemberDetailsJointLifeCoBorrowerEmailID, secondaryMemberDetailsJointLifeCoBorrowerCustomerID, secondaryMemberDetailsJointLifeCoBorrowerLoanId, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("Verify the successful messages and click go to Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000244-Home Loan", "Loan Against Property", "06/09/1980 00:00:00", "03/03/2023 00:00:00", "42", "10", "1900000", "No", "No", "123", "Single Life", "Mr", "BorrowerFirstOne", "SurnameFirstOne", "KODA01593", "KODA01593", "", "", "North", "ANUPGARH", "70.0", "8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Kri" +
            "shna Nagar", "Ammalladinne", "Anantapur dist.", "Andhra Pradesh", "India", "515001", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "sowjanya", "krishnamurthy", "10/10/2010 00:00:00", "F", "Other", "100", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Mr", "Krishna Murthy", "Gudipala", "M", "Married", "06/08/1990 00:00:00", "", "Other", "", "", "", "", "", "0", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyFIGUserAbleToNavigateToInsuranceApplicationPageAfterPremiumCalculationByClickingOnCreateInsuranceApplicationButton with ""Muthoot Finance"", ""CD000244-Home Loan"", ""Loan Against Property"", ""06/09/1980 00:00:00"", ""03/03/2023 00:00:00"", ""42"", ""10"", ""1900000"", ""No"", ""No"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstOne"", ""SurnameFirstOne"", ""KODA01593"", ""KODA01593"", """", """", ""North"", ""ANUPGARH"", ""70_0"", ""8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Krishna Nagar"", ""Ammalladinne"", ""Anantapur dist_"", ""Andhra Pradesh"", ""India"", ""515001"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""sowjanya"", ""krishnamurthy"", ""10/10/2010 00:00:00"", ""F"", ""Other"", ""100"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Mr"", ""Krishna Murthy"", ""Gudipala"", ""M"", ""Married"", ""06/08/1990 00:00:00"", """", ""Other"", """", """", """", """", """", ""0"", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyFIGUserAbleToNavigateToInsuranceApplicationPageAfterPremiumCalculationByClickingOnCreateInsuranceApplicationButton(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "durgaTestCase18",
                    "DataSource:PremiumCalculatorDataNominee100percentshare.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify FIG User able to navigate to Insurance Application page after premium calc" +
                    "ulation by clicking on Create Insurance Application button", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Verify with premium Calculator Output title", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestCaseAttribute("Muthoot Finance", "CD000244-Home Loan", "Loan Against Property", "06/09/1980 00:00:00", "03/03/2023 00:00:00", "42", "10", "1900000", "No", "No", "123", "Single Life", "Mr", "BorrowerFirstOne", "SurnameFirstOne", "KODA01593", "KODA01593", "", "", "North", "ANUPGARH", "70.0", "8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Kri" +
            "shna Nagar", "Ammalladinne", "Anantapur dist.", "Andhra Pradesh", "India", "515001", "9441383164", "pavan.dinavahi@valuemomentum.com", "M", "", "Mrs", "sowjanya", "krishnamurthy", "10/10/2010 00:00:00", "F", "Other", "100", "9502996647", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Mr", "Krishna Murthy", "Gudipala", "M", "Married", "06/08/1990 00:00:00", "", "Other", "", "", "", "", "", "0", "", "", "", "", "", "", "Single Premium", "", "", "", "", "", "", "", null, TestName=@"VerifyFIGUserAbleToEnterMandatoryValuesForFieldsSalutationFirstNameSurNameLoanIDCustomerIDGenderDropDownMobileNumberAfterClickingOnBorrowerDetailsTab_ with ""Muthoot Finance"", ""CD000244-Home Loan"", ""Loan Against Property"", ""06/09/1980 00:00:00"", ""03/03/2023 00:00:00"", ""42"", ""10"", ""1900000"", ""No"", ""No"", ""123"", ""Single Life"", ""Mr"", ""BorrowerFirstOne"", ""SurnameFirstOne"", ""KODA01593"", ""KODA01593"", """", """", ""North"", ""ANUPGARH"", ""70_0"", ""8-3-231/B/367, Pillar No 11, Indoor Stadium Lane, Sri Krishna Nagar, B Block, Krishna Nagar"", ""Ammalladinne"", ""Anantapur dist_"", ""Andhra Pradesh"", ""India"", ""515001"", ""9441383164"", ""pavan_dinavahi@valuemomentum_com"", ""M"", """", ""Mrs"", ""sowjanya"", ""krishnamurthy"", ""10/10/2010 00:00:00"", ""F"", ""Other"", ""100"", ""9502996647"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", ""Mr"", ""Krishna Murthy"", ""Gudipala"", ""M"", ""Married"", ""06/08/1990 00:00:00"", """", ""Other"", """", """", """", """", """", ""0"", """", """", """", """", """", """", ""Single Premium"", """", """", """", """", """", """", """"")]
        public virtual void VerifyFIGUserAbleToEnterMandatoryValuesForFieldsSalutationFirstNameSurNameLoanIDCustomerIDGenderDropDownMobileNumberAfterClickingOnBorrowerDetailsTab_(
                    string financialInstitution, 
                    string policyNo_, 
                    string typeOfLoanProduct, 
                    string dateOfBirthDDMMYYYY, 
                    string dateOfCommencementOfLoanCover, 
                    string ageInYearsAtCommencement, 
                    string totalTenureMonthsYears, 
                    string coverAmountSanctionedLoanAmount, 
                    string isPremiumFundedYesNo, 
                    string iSDOGHSMQSUBMITTED, 
                    string referenceUTRNO_, 
                    string rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, 
                    string borrowersSalutationDrMissMrMrsMs, 
                    string borrowersFirstName, 
                    string borrowersSurName, 
                    string loanID, 
                    string customerID, 
                    string applicationID, 
                    string coverEndDate, 
                    string regionNorthEastWestSouthSouth1South2, 
                    string branchName, 
                    string branchCode, 
                    string borrowersAddressAddressLine1, 
                    string borrowersAddressAddressLine2, 
                    string borrowersAddressAddressLine3, 
                    string borrowersAddressStateUT, 
                    string borrowersAddressCountry, 
                    string borrowersAddressPinCode, 
                    string borrowersMobileNo_, 
                    string borrowersEmailId, 
                    string borrowersGender, 
                    string coverScheduleTypeEffectiveNominal, 
                    string nOMINEE1NomineesSalutationDrMissMrMrsMs, 
                    string nOMINEE1NomineesFirstName, 
                    string nOMINEE1NomineesSurName, 
                    string nOMINEE1NomineesDOBDDMMYYYY, 
                    string nOMINEE1NomineesGender, 
                    string nOMINEE1NomineesRelationshipWithBorrower, 
                    string nOMINEE1ShareIfMultipleNominees, 
                    string nOMINEE1NomineesMobileNumber, 
                    string nOMINEE2NomineesSalutation, 
                    string nOMINEE2NomineesFirstName, 
                    string nOMINEE2NomineesSurName, 
                    string nOMINEE2NomineesDOB, 
                    string nOMINEE2NomineesGender, 
                    string nOMINEE2NomineesRelationshipWithBorrower, 
                    string nOMINEE2ShareIfMultipleNominees, 
                    string nOMINEE2NomineesMobileNumber, 
                    string nOMINEE3NomineesSalutation, 
                    string nOMINEE3NomineesFirstName, 
                    string nOMINEE3NomineesSurName, 
                    string nOMINEE3NomineesDOB, 
                    string nOMINEE2NomineesGender_1, 
                    string nOMINEE3NomineesRelationshipWithBorrower, 
                    string nOMINEE3ShareIfMultipleNominees, 
                    string nOMINEE3NomineesMobileNumber, 
                    string nOMINEE4NomineesSalutation, 
                    string nOMINEE4NomineesFirstName, 
                    string nOMINEE4NomineesSurName, 
                    string nOMINEE4NomineesDOB, 
                    string nOMINEE4NomineesGender, 
                    string nOMINEE4NomineesRelationshipWithBorrower, 
                    string nOMINEE4ShareIfMultipleNominees, 
                    string nOMINEE4NomineesMobileNumber, 
                    string appointeesSalutationDrMissMrMrsMs, 
                    string appointeesFirstName, 
                    string appointeesSurName, 
                    string appointeesGender, 
                    string appointeesMaritalStatus, 
                    string appointeesDOBDDMMYYYY, 
                    string appointeesIDNO_, 
                    string appointeesRelationshipWithTheBorrower, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs, 
                    string secondaryMemberDetailsJointLifeCoBorrowerFirstName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerSurName, 
                    string secondaryMemberDetailsJointLifeCoBorrowerGender, 
                    string dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, 
                    string ageInYearsAtCommencementJoint_Life, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCoverAmount, 
                    string secondaryMemberDetailsJointLifeCoBorrowerCustomerID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerLoanId, 
                    string secondaryMemberJoint_LifeCoBorrowerApplicationID, 
                    string secondaryMemberDetailsJointLifeCoBorrowerMobileNo_, 
                    string secondaryMemberDetailsJointLifeCoBorrowerEmailID, 
                    string mODSinglePremiumRegularPremium, 
                    string aadhaarReferenceNo_, 
                    string occupationCode, 
                    string occupationName, 
                    string temporaryLoanID, 
                    string clientPremium, 
                    string goodsAndServiceTax, 
                    string totalClientPremium, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "durgaTestCase21",
                    "DataSource:PremiumCalculatorDataNominee100percentshare.xlsx",
                    "DataSet:SampleReport"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FinancialInstitution", financialInstitution);
            argumentsOfScenario.Add("Policy No.", policyNo_);
            argumentsOfScenario.Add("Type of Loan/ Product", typeOfLoanProduct);
            argumentsOfScenario.Add("Date of Birth (DD/MM/YYYY)", dateOfBirthDDMMYYYY);
            argumentsOfScenario.Add("Date of commencement of loan/cover", dateOfCommencementOfLoanCover);
            argumentsOfScenario.Add("Age (in years) at commencement", ageInYearsAtCommencement);
            argumentsOfScenario.Add("Total Tenure (Months/Years)", totalTenureMonthsYears);
            argumentsOfScenario.Add("Cover Amount (Sanctioned Loan Amount)", coverAmountSanctionedLoanAmount);
            argumentsOfScenario.Add("Is premium funded? (Yes/ No)", isPremiumFundedYesNo);
            argumentsOfScenario.Add("IS DOGH/SMQ SUBMITTED", iSDOGHSMQSUBMITTED);
            argumentsOfScenario.Add("Reference UTR NO.", referenceUTRNO_);
            argumentsOfScenario.Add("Roles associated with the loan (Single Life, Joint-Life, Co-borrower)", rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower);
            argumentsOfScenario.Add("Borrower\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", borrowersSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Borrower\'s First Name", borrowersFirstName);
            argumentsOfScenario.Add("Borrower\'s Sur Name", borrowersSurName);
            argumentsOfScenario.Add("Loan ID", loanID);
            argumentsOfScenario.Add("Customer ID", customerID);
            argumentsOfScenario.Add("Application ID", applicationID);
            argumentsOfScenario.Add("Cover End date", coverEndDate);
            argumentsOfScenario.Add("Region (North,East,West,South,South1,South2)", regionNorthEastWestSouthSouth1South2);
            argumentsOfScenario.Add("Branch Name", branchName);
            argumentsOfScenario.Add("Branch Code", branchCode);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 1", borrowersAddressAddressLine1);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 2", borrowersAddressAddressLine2);
            argumentsOfScenario.Add("Borrower\'s Address: Address Line 3", borrowersAddressAddressLine3);
            argumentsOfScenario.Add("Borrower\'s Address: State/UT", borrowersAddressStateUT);
            argumentsOfScenario.Add("Borrower\'s Address: Country", borrowersAddressCountry);
            argumentsOfScenario.Add("Borrower\'s Address: Pin Code", borrowersAddressPinCode);
            argumentsOfScenario.Add("Borrower\'s Mobile No.", borrowersMobileNo_);
            argumentsOfScenario.Add("Borrower\'s Email Id", borrowersEmailId);
            argumentsOfScenario.Add("Borrower\'s Gender", borrowersGender);
            argumentsOfScenario.Add("Cover Schedule Type (Effective, Nominal)", coverScheduleTypeEffectiveNominal);
            argumentsOfScenario.Add("NOMINEE #1:Nominee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", nOMINEE1NomineesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s First Name", nOMINEE1NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Sur Name", nOMINEE1NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s DOB (DD/MM/YYYY)", nOMINEE1NomineesDOBDDMMYYYY);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Gender", nOMINEE1NomineesGender);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s Relationship with Borrower", nOMINEE1NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #1: %share if multiple Nominees", nOMINEE1ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #1: Nominee\'s  Mobile Number", nOMINEE1NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Salutation", nOMINEE2NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s First Name", nOMINEE2NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Sur Name", nOMINEE2NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s DOB", nOMINEE2NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender", nOMINEE2NomineesGender);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Relationship with Borrower", nOMINEE2NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #2: %share if multiple Nominees", nOMINEE2ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s  Mobile Number", nOMINEE2NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Salutation", nOMINEE3NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s First Name", nOMINEE3NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Sur Name", nOMINEE3NomineesSurName);
            argumentsOfScenario.Add("NOMINEE#3: Nominee\'s DOB", nOMINEE3NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #2: Nominee\'s Gender_1", nOMINEE2NomineesGender_1);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s Relationship with Borrower", nOMINEE3NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #3: %share if multiple Nominees", nOMINEE3ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #3: Nominee\'s  Mobile Number", nOMINEE3NomineesMobileNumber);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Salutation", nOMINEE4NomineesSalutation);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s First Name", nOMINEE4NomineesFirstName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Sur Name", nOMINEE4NomineesSurName);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s DOB", nOMINEE4NomineesDOB);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Gender", nOMINEE4NomineesGender);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s Relationship with Borrower", nOMINEE4NomineesRelationshipWithBorrower);
            argumentsOfScenario.Add("NOMINEE #4: %share if multiple Nominees", nOMINEE4ShareIfMultipleNominees);
            argumentsOfScenario.Add("NOMINEE #4: Nominee\'s  Mobile Number", nOMINEE4NomineesMobileNumber);
            argumentsOfScenario.Add("Appointee\'s Salutation (Dr, Miss, Mr, Mrs, Ms)", appointeesSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Appointee\'s First Name", appointeesFirstName);
            argumentsOfScenario.Add("Appointee\'s SurName", appointeesSurName);
            argumentsOfScenario.Add("Appointee\'s Gender", appointeesGender);
            argumentsOfScenario.Add("Appointee\'s Marital Status", appointeesMaritalStatus);
            argumentsOfScenario.Add("Appointee\'s DOB (DD/MM/YYYY)", appointeesDOBDDMMYYYY);
            argumentsOfScenario.Add("Appointee\'s ID NO.", appointeesIDNO_);
            argumentsOfScenario.Add("Appointee\'s Relationship with the borrower", appointeesRelationshipWithTheBorrower);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Salutation (Dr, Miss, Mr, Mrs," +
                    " Ms)", secondaryMemberDetailsJointLifeCoBorrowerSalutationDrMissMrMrsMs);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): First Name", secondaryMemberDetailsJointLifeCoBorrowerFirstName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): SurName", secondaryMemberDetailsJointLifeCoBorrowerSurName);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Gender", secondaryMemberDetailsJointLifeCoBorrowerGender);
            argumentsOfScenario.Add("Date Of Birth of Secondary Insured (Joint-Life/Co borrower) (DD/MM/YYYY)", dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY);
            argumentsOfScenario.Add("Age (in years) at commencement(Joint-Life)", ageInYearsAtCommencementJoint_Life);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Cover Amount", secondaryMemberDetailsJointLifeCoBorrowerCoverAmount);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Customer ID", secondaryMemberDetailsJointLifeCoBorrowerCustomerID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Loan Id", secondaryMemberDetailsJointLifeCoBorrowerLoanId);
            argumentsOfScenario.Add("Secondary Member (Joint-Life/Co borrower) Application ID", secondaryMemberJoint_LifeCoBorrowerApplicationID);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower): Mobile No.", secondaryMemberDetailsJointLifeCoBorrowerMobileNo_);
            argumentsOfScenario.Add("Secondary Member details (Joint Life/Co borrower):  Email ID", secondaryMemberDetailsJointLifeCoBorrowerEmailID);
            argumentsOfScenario.Add("MOD(Single Premium,Regular Premium)", mODSinglePremiumRegularPremium);
            argumentsOfScenario.Add("Aadhaar Reference No.", aadhaarReferenceNo_);
            argumentsOfScenario.Add("Occupation Code", occupationCode);
            argumentsOfScenario.Add("Occupation Name", occupationName);
            argumentsOfScenario.Add("Temporary loan ID", temporaryLoanID);
            argumentsOfScenario.Add("Client Premium", clientPremium);
            argumentsOfScenario.Add("Goods and Service Tax", goodsAndServiceTax);
            argumentsOfScenario.Add("Total Client Premium", totalClientPremium);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify FIG User able to enter mandatory values  for fields(Salutation,First Name," +
                    " SurName, Loan ID, Customer ID, Gender (drop down), Mobile Number after clicking" +
                    " on Borrower details tab.", null, @__tags, argumentsOfScenario);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("Login into Suraksha Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Verify navigated to Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click Create application on the left side of the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("Click on Premium Calculator in Create application and Verify Title of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1} and {2} information", financialInstitution, regionNorthEastWestSouthSouth1South2, branchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4} and {5} Policy Details", policyNo_, rolesAssociatedWithTheLoanSingleLifeJoint_LifeCo_Borrower, mODSinglePremiumRegularPremium, totalTenureMonthsYears, coverAmountSanctionedLoanAmount, isPremiumFundedYesNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0},{1}, {2}, {3}, {4} and {5} in the BorrowerDetails section", borrowersAddressStateUT, borrowersGender, dateOfBirthDDMMYYYY, dateOfBirthOfSecondaryInsuredJoint_LifeCoBorrowerDDMMYYYY, secondaryMemberDetailsJointLifeCoBorrowerGender, dateOfCommencementOfLoanCover), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then("User should click on Create Insurance Application button on Premium Output page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should select {0} and  {1} and Click on preceed button", iSDOGHSMQSUBMITTED, referenceUTRNO_), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.Then(string.Format("User should enter {0}, {1}, {2}, {3}, {4}, {5}, {6} and then verify", borrowersFirstName, borrowersSurName, borrowersMobileNo_, borrowersEmailId, loanID, temporaryLoanID, customerID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
